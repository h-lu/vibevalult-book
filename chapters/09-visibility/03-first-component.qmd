---
title: "实战：构建你的第一个React组件"
---

> “纸上得来终觉浅，绝知此事要躬行。” —— 陆游

理论和准备工作已经全部就绪，现在是时候卷起袖子，将我们的前后端世界连接起来了。在本节中，我们将像拼装乐高一样，一步一步、一个概念一个概念地构建出我们的第一个React组件。

最终，我们将完成以下目标：

1.  初始化一个Vite + React项目。
2.  理解React组件和JSX的基本语法。
3.  学习并使用`useState` Hook来管理我们组件的内部状态。
4.  学习并使用`useEffect` Hook来处理从后端API获取数据这类“副作用”。
5.  将获取到的播放列表数据，动态地渲染到页面上。

这会是整个系统从后端到前端的第一次“握手”，也是最激动人心的时刻。

### 步骤一：初始化React前端项目

打开你的终端，确保你当前位于`VibeVault-Book`这个项目的根目录，然后严格按照以下命令执行：

```bash
# 首先，进入第九章的代码目录
cd chapter-code/ch09

# 使用Vite创建一个名为frontend的React项目
# 注意：后面的 -- --template react 是必须的，它告诉Vite我们想要一个React模板
npm create vite@latest frontend -- --template react

# 进入新创建的前端项目目录
cd frontend

# 安装项目所需的依赖包
# npm会读取package.json文件，并下载所有需要的库（如react, react-dom）
npm install
```

执行完毕后，Vite会为你生成一个结构清晰、配置好的React项目。让我们花点时间了解一下其中最重要的几个文件和目录：

```
frontend/
├── index.html      # 整个单页应用的入口HTML文件，React应用会被注入到这里。
├── package.json    # 项目的配置文件，定义了项目名称、依赖库、执行脚本等。
└── src/            # 这是我们99%的代码将要编写的地方 (Source Code)。
    ├── App.jsx     # 一个默认的、最顶层的React组件。
    ├── main.jsx    # 项目的JavaScript入口文件，它负责将App组件渲染到index.html中。
    └── ...         # 其他一些默认的资源文件，如CSS和logo。
```

### 步骤二：清理并准备我们的“画布”

Vite生成的默认项目包含了一些我们不需要的示例代码和样式。为了保持清晰，让我们先清理一下。

1.  **清空 `App.jsx`**: 打开 `src/App.jsx` 文件，删除里面的所有内容，替换为以下最基础的组件框架：

    ```jsx
    // src/App.jsx
    function App() {
      return (
        <div>
          <h1>VibeVault</h1>
        </div>
      );
    }

    export default App;
    ```
    这是一个最简单的React组件，它是一个返回了一些类似HTML代码的JavaScript函数。这种在JS中写HTML的语法，就是**JSX**。它让我们可以用声明式的方式直观地描述UI。

2.  **清空 `App.css`**: 打开 `src/App.css`，删除里面的所有CSS规则。

3.  **启动开发服务器**: 现在，在你的终端里（确保仍然在`frontend`目录下），运行以下命令来启动开发服务器：
    ```bash
    npm run dev
    ```
    Vite会启动一个开发服务器，通常在 `http://localhost:5173`。在浏览器中打开这个地址，你现在应该只能看到一个非常干净的页面，上面只有一个标题“VibeVault”。这就是我们接下来要挥洒创意的“画布”。

### 步骤三：引入第一个Hook - `useState`

在获取真实数据之前，让我们先用“假数据”来学习React最重要的一个概念：**状态（State）**。

状态，是组件自己内部的、随时间变化的数据。当状态改变时，React会自动“重新渲染（re-render）”组件，以保证UI和数据的一致性。管理状态的工具，就是`useState` **Hook**。

让我们修改`App.jsx`，用`useState`来管理一个假的播放列表：

```jsx
// src/App.jsx

// 从react库中导入useState
import { useState } from 'react';

function App() {
  // 调用useState，传入初始状态（一个包含两个假播放列表的数组）
  // 它返回一个数组，包含：
  // 1. 当前的状态值 (playlists)
  // 2. 一个用来更新这个状态的函数 (setPlaylists)
  const [playlists, setPlaylists] = useState([
    { name: 'Chill Vibes (Fake)' },
    { name: 'Workout Mix (Fake)' },
  ]);

  return (
    <div>
      <h1>VibeVault Playlists</h1>
      <ul>
        {/* 
          这里是JSX的魔法：我们可以在{}中嵌入任何JavaScript表达式。
          我们使用.map()方法遍历playlists数组，为每个播放列表对象
          生成一个<li>元素。
          `key`是一个特殊的、必须的prop，React用它来识别列表中的每个元素，
          以便在列表更新时进行高效的DOM操作。
        */}
        {playlists.map(playlist => (
          <li key={playlist.name}>{playlist.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;
```

保存文件。你的浏览器应该会立刻刷新，显示出我们定义的两个假的播放列表。

通过这个练习，我们掌握了：
1.  如何用`useState`来声明和初始化组件的状态。
2.  如何使用`.map()`方法，根据数组状态动态地渲染出一个列表。这是构建动态UI最核心的模式之一。

### 步骤四：第二个Hook - `useEffect` 与数据获取

现在，是时候丢掉假数据，去获取真实的后端数据了。

在React组件的渲染过程中，直接去请求API、操作DOM或者设置定时器等行为，都被称为**副作用（Side Effects）**，因为它们会影响到组件之外的东西。React规定，所有的副作用都必须在`useEffect` Hook中执行。

`useEffect`告诉React：“请在组件渲染到屏幕之后，再执行这段代码。”

让我们来构建最终版本的`App.jsx`：

```jsx
// src/App.jsx
import { useState, useEffect } from 'react';

function App() {
  // 1. 定义三个状态，覆盖所有UI场景
  const [playlists, setPlaylists] = useState([]); // 初始为空数组
  const [loading, setLoading] = useState(true);   // 初始为true，因为一开始就要加载
  const [error, setError] = useState(null);       // 初始为null，因为还没有错误

  // 2. 使用useEffect来执行获取数据的副作用
  useEffect(() => {
    // 定义一个异步函数来获取数据，这样我们就可以在内部使用await
    async function fetchPlaylists() {
      try {
        // 后端API的地址
        // 注意, 这里需要先添加 api/playlists (获取所有播放列表)到你的后端服务中
        const apiUrl = 'http://localhost:8080/api/playlists';
        const response = await fetch(apiUrl);

        // 如果响应状态码不是2xx (e.g., 404, 500)，则它不是一个成功的请求
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        setPlaylists(data); // 成功，用获取的数据更新状态
        setError(null);     // 清除之前的错误
      } catch (err) {
        // 如果在fetch或解析过程中发生任何错误
        setError(err.message); // 将错误信息存入状态
        setPlaylists([]);      // 清空数据
      } finally {
        // 无论成功还是失败，这个代码块都会执行
        setLoading(false); // 加载过程结束
      }
    }

    fetchPlaylists(); // 调用我们定义的异步函数

  }, []); // <-- 注意这个空的依赖数组！

  // 3. 根据状态，进行条件渲染
  
  // 场景一：正在加载
  if (loading) {
    return <div>Loading playlists...</div>;
  }

  // 场景二：发生错误
  if (error) {
    return <div style={{ color: 'red' }}>Error: {error}</div>;
  }

  // 场景三：成功获取数据
  return (
    <div>
      <h1>My Vibe Vault Playlists</h1>
      <ul>
        {playlists.map(playlist => (
          <li key={playlist.name}>
            {playlist.name}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
```

### 代码终极解析

1.  **启动后端服务**: 在动手尝试前，请务必确保你的Java Spring Boot后端服务正在运行！你需要打开**另一个终端窗口**，进入`ch09`目录，然后运行 `./gradlew :app:bootRun`。

2.  **`useEffect`的依赖数组**: `useEffect`的第二个参数是一个“依赖数组”。
    *   当我们传入一个**空数组 `[]`** 时，我们是在告诉React：“这个effect**只在组件第一次挂载（mount）时运行一次**，之后就再也不要运行了。” 这对于“初始化数据获取”这样的场景是完美的。
    *   如果数组中包含变量（如`[userId]`），那么只有当`userId`改变时，effect才会重新运行。
    *   如果不传第二个参数（不推荐），则effect会在每次组件渲染后都运行。

3.  **条件渲染 (Conditional Rendering)**: 注意我们是如何通过`if (loading)`和`if (error)`来提前返回不同UI的。这种模式让我们的代码逻辑非常清晰：先处理加载和错误这两种“边缘情况”，最后才处理“成功”的主体UI。这比将所有逻辑都混在一个`return`语句里要易于阅读和维护得多。

### 最终结果

现在，保存你的`App.jsx`文件。回到浏览器，你应该会先短暂地看到“Loading playlists...”，然后（如果你的后端正在运行）这个消息会消失，取而代之的是从你的Java API中获取到的播放列表！

恭喜！你已经真正地从零开始，一步步地理解并构建了一个完整的全栈功能。你现在掌握了React中最核心的两个Hook——`useState`和`useEffect`——并用它们解决了真实世界中的问题。



### Vibe Check (思考与练习)

1.  **编码练习**: 在我们现有的代码基础上，为每个播放列表显示其中的歌曲数量。你需要修改后端API返回的数据结构（让它包含一个`songCount`字段），并在前端组件中渲染它。
2.  **破坏性实验**: 故意将`fetch`请求的URL写错（例如，改成`/api/playlistss`)，或者在你的Java Controller中手动`throw new RuntimeException()`让后端API返回一个错误状态码（例如500）。观察前端页面会发生什么？你写的错误处理逻辑是否正确地捕获并显示了错误信息？
3.  **AI协同与重构**: 询问AI：“请帮我将一个简单的HTML表单（包含一个输入框和一个提交按钮）转换为一个React组件，并使用`useState`来管理输入框的值。” 尝试将这个表单组件添加到你的`App.jsx`中，为未来实现“创建新播放列表”的功能做准备。
4.  **组件拆分**: 当前我们所有的逻辑都在`App.jsx`中。尝试创建一个新的组件文件`PlaylistList.jsx`，将所有与列表相关的逻辑（`useState`, `useEffect`, 渲染逻辑）都移动到这个新组件中，然后在`App.jsx`中导入并使用`<PlaylistList />`。这是组件化思维的关键一步。 