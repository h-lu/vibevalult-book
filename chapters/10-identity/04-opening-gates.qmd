# 10.4 敞开大门：构建认证API与测试

> "每一段伟大的旅程，都始于一个敞开的大门。"

在上一节，我们建立了安全系统的“地基”。我们有了用户模型（`User`），有了密码保险箱（`PasswordEncoder`），还学会了如何设置基本的防火墙规则（`SecurityFilterChain`）。但现在，我们的堡垒固若金汤，却也密不透风。用户没有“门”可以进来。

我们需要为他们建造一个宏伟、坚固、且标识清晰的“正门”——一个允许新用户注册、老用户登录的API。

## 本节危机：如何将“认证”这个抽象概念，转化为具体的代码？

我们知道需要一个注册接口和一个登录接口。但它们背后的逻辑是什么？
*   当一个用户注册时，我们如何将他提供的明文密码，安全地加密并存入数据库？
*   当一个用户登录时，我们如何调用Spring Security已经建立好的那套复杂的认证机制，来验证他的凭证？
*   我们应该把这些逻辑写在哪里？直接写在`Controller`里吗？

如果我们把所有逻辑都堆在`Controller`里，它很快就会变得臃肿不堪，违反了我们在第六章学到的“关注点分离”原则。**我们面临的危机是：缺乏一个清晰的、分层的实现模型，来将“认证”这个业务流程，优雅地转化为可维护、可测试的代码。**

## 本节顿悟：服务层(Service)——业务流程的编排者

解决方案，依然是我们在第六章学到的“三层架构”思想。我们将创建一个专门的`AuthenticationService`，来扮演“认证流程编排者”的角色。

*   **Controller的职责**: 依然是做它最擅长的事——处理HTTP请求，解析请求体，调用服务，然后返回响应。它像一个“前台接待”，不关心业务的具体执行过程。
*   **Service的职责**: 封装所有与认证相关的业务逻辑。比如，“注册”这个业务流程，就包括了“加密密码”、“创建User对象”、“保存到数据库”等一系列步骤。`AuthenticationService`将负责“编排”这些步骤的正确执行顺序。

### 1. 定义数据契约 (DTOs)

首先，我们需要定义API的“通用语言”，即DTO（Data Transfer Object）。在`com.vibevault.dto`下创建两个`record`：

```java
// In: src/main/java/com/vibevault/dto/SignUpRequest.java
package com.vibevault.dto;

// 用于接收注册和登录请求的JSON体
public record SignUpRequest(String username, String password) {}
```

```java
// In: src/main/java/com/vibevault/dto/JwtAuthenticationResponse.java
package com.vibevault.dto;

// 用于在认证成功后，返回JWT令牌
public record JwtAuthenticationResponse(String token) {}
```

### 2. 升级用户模型并实现`UserDetailsService`

在Spring Security的认证流程中，它需要一个知道“如何根据用户名加载用户”的组件。这个组件就是`UserDetailsService`。同时，Spring Security还需要我们的`User`类能被它“理解”，这意味着`User`类需要实现`UserDetails`接口。

**首先，我们来升级`User.java`**，让它实现`UserDetails`接口。这为Spring Security提供了访问用户核心安全信息（如密码、权限、账户状态）的标准方法。

```java
// In: src/main/java/com/vibevault/model/User.java
package com.vibevault.model;

import jakarta.persistence.*;
import lombok.Data;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Data
@Entity
@Table(name = "users")
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    @Column(nullable = false)
    private String password; // 这里将存储BCrypt加密后的哈希值

    // --- UserDetails 方法实现 ---

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        // 在本章我们暂不涉及角色和权限，因此返回一个空列表
        return List.of();
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        // 为简化起见，我们假设账户永不过期
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        // 账户永不锁定
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        // 凭证永不过期
        return true;
    }

    @Override
    public boolean isEnabled() {
        // 账户永远启用
        return true;
    }
}
```

**接着，我们创建`UserService`**，并在其中提供`UserDetailsService`的实现。这个服务将成为加载用户数据的唯一入口。

在`com.vibevault`下创建`service`包，并创建`UserService.java`：
```java
package com.vibevault.service;

import com.vibevault.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;

    // 返回一个UserDetailsService的实现
    // Spring Security将调用这个实现来加载用户
    public UserDetailsService userDetailsService() {
        return username -> userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    }
}
```

### 3. 创建认证服务 (`AuthenticationService`)

现在，我们来创建核心的`AuthenticationService`。

```java
// In: src/main/java/com/vibevault/service/AuthenticationService.java
package com.vibevault.service;

import com.vibevault.dto.JwtAuthenticationResponse;
import com.vibevault.dto.SignUpRequest;
import com.vibevault.model.User;
import com.vibevault.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthenticationService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    // 我们将在下一节注入JwtService

    public void signup(SignUpRequest request) {
        User user = new User();
        user.setUsername(request.username());
        user.setPassword(passwordEncoder.encode(request.password())); // 加密密码！
        userRepository.save(user);
    }

    public JwtAuthenticationResponse signin(SignUpRequest request) {
        // 触发Spring Security的标准认证流程
        authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(request.username(), request.password())
        );

        // 如果上面没有抛出异常，说明认证成功
        // 暂时返回一个假的token，我们下一节再实现真的
        return new JwtAuthenticationResponse("dummy-jwt-token-for-now");
    }
}
```
**代码深度解析**:
*   **`signup`方法**: 逻辑清晰——创建`User`对象，使用`PasswordEncoder`加密密码，然后保存。
*   **`signin`方法**: 这是最关键的一步。我们调用`authenticationManager.authenticate(...)`。这个`AuthenticationManager`（我们稍后会在`SecurityConfig`中配置它）是Spring Security认证流程的“总指挥”。它会自动找到我们提供的`UserDetailsService`来加载用户，然后用我们提供的`PasswordEncoder`来比对密码。如果用户名或密码错误，它会直接抛出异常，我们的代码就不会往下执行。

### 4. 配置`AuthenticationManager`

`AuthenticationManager`需要我们显式地在`SecurityConfig`中配置和暴露为一个Bean。

```java
// In: src/main/java/com/vibevault/config/SecurityConfig.java

// ... imports ...
import com.vibevault.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor // 使用Lombok进行构造函数注入
public class SecurityConfig {

    private final UserService userService;

    // ... securityFilterChain Bean is defined below ...
    // ... passwordEncoder Bean is defined below ...

    @Bean
    public AuthenticationProvider authenticationProvider(PasswordEncoder passwordEncoder) {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userService.userDetailsService());
        authProvider.setPasswordEncoder(passwordEncoder);
        return authProvider;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}
```
我们在这里定义了`AuthenticationProvider`，它像一个“适配器”，告诉`AuthenticationManager`应该使用哪个`UserDetailsService`和哪个`PasswordEncoder`。

### 5. 创建认证控制器 (`AuthenticationController`)

最后，我们创建`Controller`，将服务暴露为API。

```java
// In: src/main/java/com/vibevault/controller/AuthenticationController.java
package com.vibevault.controller;

import com.vibevault.dto.JwtAuthenticationResponse;
import com.vibevault.dto.SignUpRequest;
import com.vibevault.service.AuthenticationService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthenticationController {

    private final AuthenticationService authenticationService;

    @PostMapping("/signup")
    public ResponseEntity<String> signup(@RequestBody SignUpRequest request) {
        authenticationService.signup(request);
        return ResponseEntity.ok("User registered successfully");
    }

    @PostMapping("/signin")
    public ResponseEntity<JwtAuthenticationResponse> signin(@RequestBody SignUpRequest request) {
        return ResponseEntity.ok(authenticationService.signin(request));
    }
}
```

### 6. 更新防火墙规则

最后一步，也是至关重要的一步：我们需要在`SecurityConfig`中，为我们的认证API“打开城门”。

```java
// In: src/main/java/com/vibevault/config/SecurityConfig.java

import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

// ...

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {
    
    // ... other beans and fields ...

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // 禁用CSRF，因为我们使用无状态API
            .authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/api/auth/**").permitAll() // 明确允许访问/api/auth下的所有端点
                .anyRequest().authenticated() // 其他所有请求，都需要认证
            )
            // ... 我们将在下一节添加JWT过滤器和Session管理
            ;
        return http.build();
    }
    
    // ... other beans like passwordEncoder, authenticationProvider, etc.
}
```
`.requestMatchers("/api/auth/**").permitAll()`这条规则，就是我们为新用户和未登录用户敞开的“正门”。

现在，重启应用。我们的VibeVault已经拥有了功能完备的注册和登录接口。虽然登录后我们还无法“记住”用户，但我们已经成功地将认证的核心流程搭建了起来。

## Vibe Check: 用集成测试验证我们的城门

我们已经用Postman这样的手动工具验证了接口，但这在工程上是远远不够的。手动的、一次性的测试是不可靠、不可重复的。真正的工程师会为代码建立一个“安全网”——自动化测试。

**本节顿悟：测试是验证功能正确性的基石。** 我们将编写一个**集成测试**，它会像一个真正的客户端一样调用我们的API，并验证从HTTP请求、到服务逻辑、再到数据库交互的整个流程是否正确。这是确保我们的“城门”既坚固又功能完备的最佳方式。

**第一步：添加测试依赖**
首先，确保你的 `app/build.gradle.kts` 文件中包含了Spring Boot的测试启动器。通常，这是自动包含的，但检查一下总没错。同时，为了后续测试，我们最好也把Spring Security的测试支持加进来。

```kotlin
// In: app/build.gradle.kts
dependencies {
    // ... 其他依赖 ...
    testImplementation(libs.spring.boot.starter.test)
    testImplementation(libs.spring.security.test) // 确保也添加了Spring Security的测试支持
}
```
同时，在 `gradle/libs.versions.toml` 中也应有对应的定义：
```toml
# In: gradle/libs.versions.toml
[libraries]
# ...
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-security-test = { module = "org.springframework.security:spring-security-test" }
```

**第二步：创建测试文件**
在 `src/test/java/com/vibevault/controller/` 目录下，创建一个新的Java类 `AuthenticationControllerTest.java`。

```java
package com.vibevault.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vibevault.dto.SignUpRequest;
import com.vibevault.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@Transactional // 让每个测试都在事务中运行，测试结束后自动回滚，不污染数据库
public class AuthenticationControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private UserRepository userRepository;

    // 在每个测试前，清空用户数据，确保测试环境的纯净
    @BeforeEach
    void setUp() {
        userRepository.deleteAll();
    }

    @Test
    void whenSignUpWithNewUser_thenReturns200() throws Exception {
        SignUpRequest newUser = new SignUpRequest("testuser1", "password123");

        mockMvc.perform(post("/api/auth/signup")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(newUser)))
                .andExpect(status().isOk());
    }

    @Test
    void whenSignInWithValidUser_thenReturns200AndToken() throws Exception {
        // 步骤1: 先注册一个用户
        SignUpRequest user = new SignUpRequest("testuser2", "password123");
        mockMvc.perform(post("/api/auth/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(user)));

        // 步骤2: 使用正确的凭证登录
        mockMvc.perform(post("/api/auth/signin")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.token").exists()); // 验证返回的JSON中包含 "token" 字段
    }

    @Test
    void whenSignInWithInvalidPassword_thenReturns403() throws Exception {
        // 步骤1: 先注册一个用户
        SignUpRequest user = new SignUpRequest("testuser3", "password123");
        mockMvc.perform(post("/api/auth/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(user)));

        // 步骤2: 使用错误的密码登录
        SignUpRequest wrongCredentials = new SignUpRequest("testuser3", "wrongpassword");
        mockMvc.perform(post("/api/auth/signin")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(wrongCredentials)))
                .andExpect(status().isForbidden()); // 或 isUnauthorized()，取决于具体配置
    }
}
```

**第三步：运行测试**
在你的项目根目录下打开终端，执行以下命令：
```bash
./gradlew test
```
如果所有测试都显示为绿色通过，那么恭喜你！你已经用工业级的标准，验证了你的认证入口是健壮和可靠的。


## Vibe Check (思考与练习)

1.  **核心练习**: 严格按照本节步骤，实现`AuthenticationService`和`AuthenticationController`，并正确配置`SecurityConfig`。
2.  **编码练习**: 严格按照本节步骤，在你的项目中创建并运行`AuthenticationControllerTest.java`。观察所有测试是否通过。
3.  **破坏性实验**: 在`AuthenticationControllerTest`中，修改`whenSignInWithValidUser_thenReturns200AndToken`测试，将登录密码改成错误的，然后运行测试。观察测试失败的报告，理解它告诉你哪里出了问题。这能极大地锻炼你的调试能力。
4.  **深入思考**: `AuthenticationManager.authenticate()`这个方法背后发生了什么？它如何与我们定义的`UserDetailsService`和`PasswordEncoder`进行交互来完成验证？画一个简单的序列图来描述这个过程。
