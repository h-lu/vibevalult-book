---
title: "10.6 城门的哨兵：验证JWT"
---

# 10.6 城门的哨兵：验证JWT

> "信任固然好，验证价更高。"

在上一节，我们的“数字护照办公室” (`JwtService`) 已经开始运转，能够为登录和注册成功的用户签发真实的JWT了。用户拿到了这张宝贵的通行证，但我们的系统还缺少最关键的一环。

## 本节危机：有护照，无哨兵

想象一下，一个国家可以完美地印制带有防伪芯片的护照，但它的所有边境口岸、机场、车站都没有任何检查人员。那么，这张护照就形同虚设。

我们的VibeVault现在就处于这种状态。我们有了JWT，但还没有一个“哨兵”来检查它。这意味着，即使我们想创建一个“仅限登录用户访问”的API，我们也做不到，因为系统根本不知道如何去验证用户手中的JWT。**所有端点，实际上仍然对所有人开放。**

## 本节顿悟：用过滤器(Filter)建立检查站

解决方案是在我们的系统入口处，设立一个检查站。在Web应用中，这个检查站的角色由**过滤器 (Servlet Filter)** 来扮演。

我们将创建一个`JwtAuthenticationFilter`。它就像一个部署在安全防线最前沿的、尽职尽责的“哨兵”。在任何受保护的请求真正到达我们的`Controller`之前，都会先经过这个哨兵的盘查。

**哨兵的工作流程非常清晰：**
1.  拦截进入的请求。
2.  检查请求头中是否包含`Authorization: Bearer <JWT>`。
3.  如果没有，直接放行（后续的安全机制会处理这个匿名请求）。
4.  如果有，提取出JWT，并交给`JwtService`进行“验伪”。
5.  如果JWT有效，就从其中解析出用户信息，并将其登记在`SecurityContextHolder`中。
6.  `SecurityContextHolder`是Spring Security的“官方访客登记处”。一旦这里有了用户信息，Spring Security就认为当前用户是“已认证”的。

### 第一步：升级`JwtService`，赋予其“验伪”能力

我们的`JwtService`现在不仅要会签发护照，还要会验证护照。我们需要为它补充上解析和验证Token的方法。

```java
// In: src/main/java/com/vibevault/service/JwtService.java
package com.vibevault.service;

// ... imports ...
import io.jsonwebtoken.Claims;
import java.util.function.Function;

@Service
@RequiredArgsConstructor
public class JwtService {

    private final JwtProperties jwtProperties;

    // --- 新增方法 ---
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);
    }

    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    private Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }
    
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSignInKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // --- 已有方法 ---
    // generateToken(...)
    // getSignInKey()
}
```

### 第二步：创建哨兵 (`JwtAuthenticationFilter`)

现在，我们来创建哨兵本身。

```java
// In: src/main/java/com/vibevault/config/JwtAuthenticationFilter.java
package com.vibevault.config;

import com.vibevault.service.JwtService;
import com.vibevault.service.UserService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.lang.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtService jwtService;
    private final UserService userService;

    @Override
    protected void doFilterInternal(@NonNull HttpServletRequest request,
                                    @NonNull HttpServletResponse response,
                                    @NonNull FilterChain filterChain)
            throws ServletException, IOException {
        
        final String authHeader = request.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response); // 如果没有Token，直接放行给下一个过滤器
            return;
        }

        final String jwt = authHeader.substring(7);
        final String username = jwtService.extractUsername(jwt);

        // 如果Token有效，且用户未被认证
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = userService.userDetailsService().loadUserByUsername(username);
            if (jwtService.isTokenValid(jwt, userDetails)) {
                // 创建一个已认证的Authentication对象
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities());
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                // 放入SecurityContextHolder，完成认证
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        filterChain.doFilter(request, response); // 继续过滤器链
    }
}
```

### 第三步：将哨兵部署到防线上

最后一步，我们需要告诉Spring Security：“嘿，把我这个新的JWT哨兵，部署到你的安全防线（过滤器链）上去。”

我们将在`SecurityConfig`中完成这项配置。这是本章最核心的配置之一。

```java
// In: src/main/java/com/vibevault/config/SecurityConfig.java
// ... imports ...
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.authentication.AuthenticationProvider;


@Configuration
@EnableWebSecurity
@EnableConfigurationProperties(JwtProperties.class)
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthFilter;
    private final UserService userService;
    private final AuthenticationProvider authenticationProvider; // 确保注入

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // 1. 禁用CSRF保护
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 2. 设置为无状态Session
            )
            .authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/api/auth/**").permitAll() // 3. 公开认证API
                .anyRequest().authenticated() // 4. 其他所有请求都需要认证
            )
            .authenticationProvider(authenticationProvider) // 5. 设置认证提供者
            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class); // 6. 添加JWT哨兵过滤器

        return http.build();
    }
    
    // ... 其他Bean: passwordEncoder, authenticationProvider, authenticationManager ...
}
```
**配置关键点**:
1.  **`csrf(csrf -> csrf.disable())`**: 对于使用Token进行认证的无状态API，通常建议禁用CSRF保护。
2.  **`SessionCreationPolicy.STATELESS`**: **核心中的核心**。我们明确告诉Spring Security，不要创建或使用任何HTTP Session。这强制我们走向真正的无状态认证。
3.  **`.anyRequest().authenticated()`**: 这条规则现在有了真正的意义。它意味着任何不匹配`/api/auth/**`的请求，都必须经过认证才能访问。
4.  **`addFilterBefore(...)`**: 这是点睛之笔。我们将`jwtAuthFilter`添加到过滤器链中，放在处理传统表单登录的`UsernamePasswordAuthenticationFilter`**之前**。这意味着每个请求都会先经过我们的JWT哨兵的检查。

现在，我们的VibeVault终于有了一个功能完备的、受JWT保护的API系统。

## Vibe Check (思考与练习)

1.  **核心练习**: 严格按照本节步骤，为`JwtService`补充验证方法，创建`JwtAuthenticationFilter`，并将其正确整合到`SecurityConfig`中。
2.  **编码练习**: 创建一个用于测试的`HelloController`，它有一个受保护的端点 `/api/hello`，成功访问时返回当前用户名。
    ```java
    @RestController
    public class HelloController {
        @GetMapping("/api/hello")
        public String hello(@AuthenticationPrincipal UserDetails user) {
            return "Hello, " + user.getUsername();
        }
    }
    ```
3.  **集成测试**: 编写一个新的集成测试`HelloControllerTest`。
    *   测试1: `whenCallHelloWithoutToken_thenReturns401()` - 尝试直接访问`/api/hello`，预期得到401或403。
    *   测试2: `whenCallHelloWithValidToken_thenReturnsUsername()` - 先模拟登录获取Token，然后携带Token访问`/api/hello`，预期得到200 OK和正确的问候语。
4.  **深入思考**: 我们的`JwtAuthenticationFilter`继承自`OncePerRequestFilter`。为什么这很重要？在一个复杂的Web应用中，一个请求可能会在服务器内部被“转发(forward)”或“包含(include)”。`OncePerRequestFilter`如何保证我们的认证逻辑在这种情况下只执行一次？
