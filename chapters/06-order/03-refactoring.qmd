---
title: "重构！建立新秩序"
---

> "任何傻瓜都能写出计算机能理解的代码。好的程序员写出的是人类能理解的代码。" - Martin Fowler

## 本节危机：知易行难

我们已经有了清晰的蓝图（三层架构）和设计图纸（接口）。但现在，我们面对的是一栋已经建好的、混乱的房子。我们需要在不让它“垮掉”（破坏现有功能）的前提下，对它的内部结构进行一次“大手术”。

这个过程充满了风险：
*   我们如何移动代码而不错漏任何细节？
*   我们如何确保在拆分和重组之后，所有部分依然能正确地协同工作？
*   我们如何验证重构后的系统，其外在行为与重构前完全一致？

**我们面临的危机是：缺乏一套安全、严谨、循序渐进的操作流程，来指导我们完成这次复杂而关键的代码重构。**

## 本节顿悟：小步快跑，测试先行

重构的黄金法则是：**在不改变软件外在行为的前提下，改善其内部结构。**

要安全地做到这一点，我们的策略是：
1.  **依赖测试**: 我们在第五章编写的单元测试，就是我们的“安全网”。每完成一小步重构，我们都应该运行测试，确保没有破坏任何东西。
2.  **小步快跑**: 不要试图一次性完成所有重构。我们将一步一步地创建新类、移动旧逻辑，并不断验证。

现在，让我们开始这场激动人心的手术。我们将基于第五章结束时的代码进行操作。



### 第零步：复制项目

为保证安全，我们先将第五章的代码复制一份，作为第六章的起点。
```bash
cp -R chapter-code/ch05/ chapter-code/ch06/
```
我们后续的所有操作，都在`chapter-code/ch06`这个新目录中进行。

### 第一步：创建新的包结构

对抗混乱的第一步，是建立秩序井然的“抽屉”。在`src/main/java/com/vibevault/`目录下，创建以下四个子包（子目录）：
*   `app`: 我们新的主程序入口。
*   `repository`: 数据访问层。
*   `service`: 业务逻辑层。
*   `ui`: 用户界面/表现层。

将`model`包也放在`com/vibevault`下，最终你的`com/vibevault`目录看起来像这样：
```
com/vibevault/
├── app/
├── model/
│   ├── Playlist.java
│   └── Song.java
├── repository/
├── service/
└── ui/
```

### 第二步：定义“契约”——接口

在对应的包下，创建我们上一节设计好的两个接口。

**Repository接口**:
```java
// In: src/main/java/com/vibevault/repository/PlaylistRepository.java
package com.vibevault.repository;

import com.vibevault.model.Playlist;

public interface PlaylistRepository {
    void save(Playlist playlist);
    Playlist load(String playlistId);
}
```

**Service接口**:
```java
// In: src/main/java/com/vibevault/service/PlaylistService.java
package com.vibevault.service;

import com.vibevault.model.Song;

public interface PlaylistService {
    void addSong(Song song);
    void removeSong(int songIndex);
    String listSongs();
    void saveData();
}
```

### 第三步：实现数据访问层

现在，我们从最底层开始，构建`Repository`的实现。
1.  在`repository`包下，创建一个新类 `FilePlaylistRepository`。
2.  将原来`Playlist.java`中所有与**文件读写、序列化**相关的逻辑，“剪切”到这个新类中。

```java
// In: src/main/java/com/vibevault/repository/FilePlaylistRepository.java
package com.vibevault.repository;

import com.vibevault.model.Playlist;
import com.vibevault.model.Song;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class FilePlaylistRepository implements PlaylistRepository {
    private static final String FILE_PATH = "data/playlist.csv";

    @Override
    public void save(Playlist playlist) {
        List<String> csvLines = new ArrayList<>();
        for (Song song : playlist.getSongs()) {
            csvLines.add(String.format("%s,%s,%d", song.title(), song.artist(), song.durationInSeconds()));
        }

        Path path = Paths.get(FILE_PATH);
        try {
            Path parentDir = path.getParent();
            if (parentDir != null && Files.notExists(parentDir)) {
                Files.createDirectories(parentDir);
            }
            Files.write(path, csvLines);
        } catch (IOException e) {
            System.err.println("❌ 错误：无法保存播放列表。");
            e.printStackTrace();
        }
    }

    @Override
    public Playlist load(String playlistId) {
        // 为了简化，我们暂时让文件名与playlistId无关
        // 在更复杂的系统中，这里可能会是 "data/" + playlistId + ".csv"
        final String FILE_PATH = "data/playlist.csv";
        Playlist playlist = new Playlist(playlistId);
        Path path = Paths.get(FILE_PATH);

        if (Files.notExists(path)) {
            return playlist; // 文件不存在，返回新的空列表
        }

        try {
            List<String> csvLines = Files.readAllLines(path);
            for (String line : csvLines) {
                String[] fields = line.split(",");
                if (fields.length == 3) {
                    playlist.addSong(new Song(fields[0], fields[1], Integer.parseInt(fields[2])));
                }
            }
        } catch (IOException | NumberFormatException e) {
            System.err.println("❌ 错误：无法加载播放列表。");
            e.printStackTrace();
        }
        return playlist;
    }
}
```
**注意**: 我们把原来`Playlist`类中复杂的`saveToFile`, `loadFromFile`, `saveToStrings`, `loadFromStrings`等方法，全部提炼并封装到了这个单一职责的类中。

### 第四步：重构并实现业务逻辑层

现在，`Playlist`类可以“减负”了。它不再需要关心持久化，只用做好自己的本职工作：管理一个歌曲列表。

1.  **大刀阔斧地修改`Playlist.java`**: 删除所有持久化和序列化的方法，让它变回一个纯粹的“模型”。
    ```java
    // In: src/main/java/com/vibevault/model/Playlist.java
    package com.vibevault.model;
    
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    
    public class Playlist {
        private String name;
        private final List<Song> songs;
    
        public Playlist(String name) {
            this.name = name;
            this.songs = new ArrayList<>();
        }
    
        public void addSong(Song song) {
            if (song != null) {
                this.songs.add(song);
            }
        }
    
        public void removeSong(int songIndex) {
            if (songIndex >= 0 && songIndex < songs.size()) {
                songs.remove(songIndex);
            }
        }
    
        public String getName() {
            return name;
        }
    
        public List<Song> getSongs() {
            return Collections.unmodifiableList(songs); // 返回一个不可修改的视图，更安全
        }
    }
    ```

2.  **创建Service实现**: 在`service`包下创建`PlaylistServiceImpl.java`。它将**持有**`Playlist`对象（业务模型）和`PlaylistRepository`接口（数据访问），并负责协调它们。

    ```java
    // In: src/main/java/com/vibevault/service/PlaylistServiceImpl.java
    package com.vibevault.service;
    
    import com.vibevault.model.Playlist;
    import com.vibevault.model.Song;
    import com.vibevault.repository.PlaylistRepository;
    
    public class PlaylistServiceImpl implements PlaylistService {
        private final PlaylistRepository repository;
        private Playlist playlist;
        private static final String DEFAULT_PLAYLIST_ID = "my-favorites";
    
        public PlaylistServiceImpl(PlaylistRepository repository) {
            this.repository = repository;
            // 为了保持简单，我们启动时加载一个默认的播放列表
            this.playlist = this.repository.load(DEFAULT_PLAYLIST_ID); 
        }
    
        @Override
        public void addSong(Song song) {
            playlist.addSong(song);
        }
    
        @Override
        public void removeSong(int songIndex) {
            // 注意，UI是1-based，业务是0-based
            playlist.removeSong(songIndex - 1);
        }
    
        @Override
        public String listSongs() {
            StringBuilder sb = new StringBuilder();
            sb.append("--- Playlist: ").append(playlist.getName()).append(" ---\n");
            if (playlist.getSongs().isEmpty()) {
                sb.append("This playlist is empty.\n");
            } else {
                for (int i = 0; i < playlist.getSongs().size(); i++) {
                    Song currentSong = playlist.getSongs().get(i);
                    sb.append(String.format("%d. %s - %s\n", i + 1, currentSong.title(), currentSong.artist()));
                }
            }
            sb.append("---------------------------------");
            return sb.toString();
        }
    
        @Override
        public void saveData() {
            repository.save(playlist);
        }
    }
    ```

### 第五步：重构UI层并组装一切

这是最后，也是最关键的一步：将所有零件组装起来。

1.  **创建`PlaylistController.java`**: 在`ui`包下创建。`Controller`是UI逻辑的核心，它持有`Service`接口的引用。
    ```java
    // In: src/main/java/com/vibevault/ui/PlaylistController.java
    package com.vibevault.ui;
    
    import com.vibevault.model.Song;
    import com.vibevault.service.PlaylistService;
    
    import java.util.InputMismatchException;
    import java.util.Scanner;
    
    public class PlaylistController {
        private final PlaylistService playlistService;
        private final Scanner scanner;
    
        public PlaylistController(PlaylistService playlistService) {
            this.playlistService = playlistService;
            this.scanner = new Scanner(System.in);
        }
    
        public void start() {
            boolean running = true;
            while (running) {
                showMenu();
                int choice = getUserChoice();
    
                switch (choice) {
                    case 1 -> addSong();
                    case 2 -> System.out.println(playlistService.listSongs());
                    case 3 -> removeSong();
                    case 0 -> running = false;
                    default -> System.out.println("无效选择，请输入菜单中的数字。");
                }
            }
            playlistService.saveData(); // 退出时保存数据
            System.out.println("感谢使用 VibeVault！");
        }
    
        private void showMenu() {
            System.out.println("\n--- VibeVault 音乐播放列表 ---");
            System.out.println("1. 添加歌曲");
            System.out.println("2. 查看播放列表");
            System.out.println("3. 删除歌曲");
            System.out.println("0. 退出");
            System.out.print("请输入你的选择: ");
        }
    
        private int getUserChoice() {
            try {
                int choice = Integer.parseInt(scanner.nextLine()); 
                return choice;
            } catch (NumberFormatException e) {
                System.out.println("无效输入，请输入一个整数。");
                return -1; // 返回一个无效选项
            }
        }
    
        private void addSong() {
            System.out.print("请输入歌曲标题: ");
            String title = scanner.nextLine();
            System.out.print("请输入艺术家: ");
            String artist = scanner.nextLine();
            System.out.print("请输入时长（秒）: ");
            int duration = getUserChoice(); // 复用choice逻辑
    
            playlistService.addSong(new Song(title, artist, duration));
            System.out.println("歌曲添加成功！");
        }
    
        private void removeSong() {
            System.out.print("请输入要删除的歌曲编号: ");
            int index = getUserChoice();
            playlistService.removeSong(index);
            System.out.println("歌曲删除成功！");
        }
    }
    ```

2.  **创建新的应用入口`VibeVaultApp.java`**: 在`app`包下创建。这个类现在变得极其简单，它的唯一职责就是“组装”和“启动”。这个组装过程，就是**依赖注入 (Dependency Injection)** 的最朴素形式。
    ```java
    // In: src/main/java/com/vibevault/app/VibeVaultApp.java
    package com.vibevault.app;
    
    import com.vibevault.repository.FilePlaylistRepository;
    import com.vibevault.repository.PlaylistRepository;
    import com.vibevault.service.PlaylistService;
    import com.vibevault.service.PlaylistServiceImpl;
    import com.vibevault.ui.PlaylistController;
    
    public class VibeVaultApp {
        public static void main(String[] args) {
            // 依赖注入 (Dependency Injection)
            // 1. 创建最底层的Repository
            PlaylistRepository repository = new FilePlaylistRepository();
            // 2. 创建Service，并把Repository“注入”进去
            PlaylistService service = new PlaylistServiceImpl(repository);
            // 3. 创建Controller，并把Service“注入”进去
            PlaylistController controller = new PlaylistController(service);
            
            // 4. 启动应用
            controller.start();
        }
    }
    ```

### 第六步：验证！

现在，运行你的新入口`VibeVaultApp`。你会发现，它的**外部行为**（菜单、功能、持久化）与重构前**一模一样**。但是，它的内部结构已经发生了翻天覆地的变化，从一个纠缠不清的“泥球”，变成了一个职责清晰、层次分明、易于维护和扩展的“水晶”！

**我们的重构成功了！**


### 第七步：重构“信任”——升级我们的测试

重构的定义是“不改变软件外在行为”，但我们的单元测试作为“内部结构”的一部分，也必须跟随架构一起进化。事实上，这次重构最大的受益者之一，就是我们的测试。

还记得在第五章，为了测试文件操作，我们不得不使用 `mockStatic` 这个“黑魔法”吗？现在，由于我们通过接口将数据访问层和业务逻辑层解耦了，测试将变得前所未有的简单和优雅。

1.  **清理战场**:
    *   删除 `src/test/java/com/vibevault/model/PlaylistTest.java`。它的职责已经被新的测试覆盖。
    *   删除 `src/test/java/com/vibevault/model/PlaylistPersistenceTest.java`。它测试的是旧的、混合了业务和持久化逻辑的`Playlist`类，已经不再适用。

2.  **添加测试依赖**: 为了让Mockito和JUnit 5能够丝滑地协同工作（例如，使用`@ExtendWith(MockitoExtension.class)`），我们需要在`app/build.gradle.kts`中添加`mockito-junit-jupiter`依赖。

    ```kotlin
    // In: app/build.gradle.kts
    dependencies {
        // ... a之前的assertj依赖 ...

        // 添加Mockito 和 JUnit 5 (Jupiter) 的集成支持
        // 注意：mockito-junit-jupiter会传递性地引入mockito-core
        testImplementation("org.mockito:mockito-junit-jupiter:5.11.0")
    }
    ```
    > **深度解读**：`mockito-junit-jupiter` 包含了让 Mockito 的注解（如 `@Mock`, `@InjectMocks`）和生命周期与 JUnit 5 完美集成的所有必要代码。我们声明 `testImplementation` 是因为它只在测试时需要，不会被打包到最终的应用程序中。

3.  **为`PlaylistServiceImpl`编写单元测试**: 这是我们新的核心业务逻辑。我们将使用JUnit 5、AssertJ和Mockito来测试它。注意看，这次我们只需要`mock`一个普通的接口，而不再需要`mockStatic`！

    ```java
    // In: src/test/java/com/vibevault/service/PlaylistServiceImplTest.java
    package com.vibevault.service;

    import com.vibevault.model.Playlist;
    import com.vibevault.model.Song;
    import com.vibevault.repository.PlaylistRepository;
    import org.junit.jupiter.api.BeforeEach;
    import org.junit.jupiter.api.DisplayName;
    import org.junit.jupiter.api.Test;
    import org.junit.jupiter.api.extension.ExtendWith;
    import org.mockito.InjectMocks;
    import org.mockito.Mock;
    import org.mockito.junit.jupiter.MockitoExtension;

    import static org.assertj.core.api.Assertions.assertThat;
    import static org.mockito.Mockito.*;

    @ExtendWith(MockitoExtension.class) // 启用Mockito扩展
    class PlaylistServiceImplTest {

        @Mock // 创建一个PlaylistRepository的模拟对象
        private PlaylistRepository repository;

        @InjectMocks // 创建PlaylistServiceImpl实例，并自动注入上面@Mock标记的对象
        private PlaylistServiceImpl playlistService;

        @BeforeEach
        void setUp() {
            // 当repository.load()被以任意字符串参数调用时，都返回一个包含一首歌的新Playlist
            Playlist initialPlaylist = new Playlist("My Test Playlist");
            initialPlaylist.addSong(new Song("Bohemian Rhapsody", "Queen", 355));
            when(repository.load(anyString())).thenReturn(initialPlaylist);
            
            // 重新初始化service，以确保load在每个测试前都被正确地stub
            playlistService = new PlaylistServiceImpl(repository);
        }

        @Test
        @DisplayName("添加新歌曲后，歌曲列表应包含该歌曲")
        void addSong_shouldContainTheNewSong() {
            // Arrange
            Song newSong = new Song("Stairway to Heaven", "Led Zeppelin", 482);

            // Act
            playlistService.addSong(newSong);
            String songList = playlistService.listSongs();

            // Assert
            assertThat(songList).contains("Stairway to Heaven");
            assertThat(songList).contains("Bohemian Rhapsody"); // 确认旧歌还在
        }

        @Test
        @DisplayName("保存数据时，应该调用repository的save方法")
        void saveData_shouldCallRepositorySave() {
            // Act
            playlistService.saveData();

            // Assert
            // 验证repository.save()方法是否被调用了，并且是带着我们期望的Playlist对象调用的
            verify(repository, times(1)).save(any(Playlist.class));
        }
    }
    ```
    **顿悟时刻**: 看到测试`saveData`方法有多简单了吗？我们不再需要`ArgumentCaptor`去捕获`Files.write`的参数了。我们只需要验证`repository.save()`这个行为**是否发生**。这就是分层架构带来的“可测试性”的巨大提升！

### 从重构到模式：我们到底做了什么？

这次重构的意义，远不止是把代码从一个文件移动到另一个文件。我们实际上是遵循着业界沉淀已久的设计思想，将混乱的代码塑造成了两个经典的**设计模式 (Design Patterns)**。

1.  **仓库模式 (Repository Pattern)**
    *   **角色**: `PlaylistRepository` 接口和 `FilePlaylistRepository` 实现。
    *   **目的**: 它在“业务逻辑”和“数据存储”之间建立了一个抽象层。业务逻辑层（Service）不再关心数据究竟是存在CSV文件里，还是数据库里，或是某个云服务上。它只需要跟Repository这个“仓库管理员”对话，告诉它“存这个”或“取那个”就行了。这使得更换底层存储技术变得极其简单。

2.  **服务层模式 (Service Layer Pattern)**
    *   **角色**: `PlaylistService` 接口和 `PlaylistServiceImpl` 实现。
    *   **目的**: 它定义了应用程序的“业务能力边界”。所有核心的业务规则和流程都被封装在Service层。UI层（Controller）只负责调用这些服务，而不关心服务内部是如何实现的。这使得业务逻辑可以被不同的UI（命令行、Web页面、手机App）复用。

认识到这一点非常重要。你学会的不是一次性的技巧，而是构建可靠、可维护软件的通用蓝图。

## Vibe Check (思考与练习)

1.  **核心练习**: 严格按照本教程的指导，一步一步，小心翼翼地完成整个三层架构的重构。确保最终程序能正常运行，且功能与之前一致。
2.  **测试的角色**: 我们在第五章编写的单元测试，在这次重构中扮演了什么角色？
    *   在重构`Playlist`类后，你之前写的`PlaylistTest`还能编译通过吗？为什么？（提示：持久化方法没了）
    *   你需要如何修改旧的测试，并为新的`FilePlaylistRepository`和`PlaylistServiceImpl`编写新的单元测试？
    *   这个过程是否让你深刻体会到，测试既是重构的“安全网”，也是重构需要付出的“成本”？
3.  **AI协同与扩展**: "我们现在有了一个`FilePlaylistRepository`。请AI帮我设想并设计一个`InMemoryPlaylistRepository`的`interface`实现。这个新的实现将把数据存在内存的一个`static`变量里，而不是文件里（这样程序一关数据就没，适合测试）。我们如何在`VibeVaultApp.java`中，只修改一行代码（`new FilePlaylistRepository()` -> `new InMemoryPlaylistRepository()`），就让整个应用从‘文件模式’切换到‘内存模式’？" 这个练习将让你深刻体会到分层架构和面向接口编程的巨大威力。 