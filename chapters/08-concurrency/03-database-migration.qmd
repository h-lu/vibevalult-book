---
title: "迁移到PostgreSQL"
---

> "进步的代价是风险。" - 赫伯特·斯宾塞

## 本节任务：执行“心脏移植”手术

在理论上理解了数据库和ORM的“为什么”之后，本节将是我们整个项目迄今为止最重要、也最激动人心的一次动手实践。我们将为VibeVault应用执行一次“心脏移植”手术：**将我们之前基于文件的、脆弱的持久化核心，彻底替换为由Spring Data JPA和PostgreSQL驱动的、健壮的、工业级的持久化引擎。**

这个过程将深刻地改变我们应用的内部结构，但得益于我们在第六章建立的良好分层架构，这种改变将被优雅地“限制”在数据访问层，而我们的`Service`和`Controller`层几乎不需要关心底层的存储介质从“文件”变成了“数据库”。这正是分层架构的威力所在。

我们将遵循以下步骤，一步一步地完成这次伟大的迁移。



## Vibe Check (动手与思考)

### 第一步：升级项目的“依赖清单”

与第七章一样，我们不直接在`build.gradle.kts`中硬编码依赖项，而是遵循最佳实践，通过**版本目录 (Version Catalog)**，即`gradle/libs.versions.toml`文件，来集中管理它们。

1.  **添加新的依赖库定义**:
    我们需要向`[libraries]`部分添加两个新的库：`spring-data-jpa`和`postgresql`驱动。

    ```toml
    # In: chapter-code/ch08/gradle/libs.versions.toml
    
    [versions]
    springBoot = "3.4.7"
    springDependencyManagement = "1.1.7"
    
    [libraries]
    spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
    spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
    
    # --- 添加以下两行 ---
    spring-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
    postgresql = { module = "org.postgresql:postgresql" }
    
    [plugins]
    spring-boot = { id = "org.springframework.boot", version.ref = "springBoot" }
    spring-dependency-management = { id = "io.spring.dependency-management", version = "springDependencyManagement" }
    ```

2.  **在构建脚本中使用新的别名**:
    现在，我们可以在`app/build.gradle.kts`中使用我们刚刚定义的别名`libs.spring.data.jpa`和`libs.postgresql`了。

    ```kotlin
    // In: chapter-code/ch08/app/build.gradle.kts
    
    dependencies {
        implementation(libs.spring.boot.starter.web)
    
        // --- 添加新的依赖 ---
        implementation(libs.spring.data.jpa)
        runtimeOnly(libs.postgresql)
        // --- 依赖添加结束 ---
    
        testImplementation(libs.spring.boot.starter.test)
    }
    ```
*`runtimeOnly`表示这个依赖只在运行时需要，编译时并不需要。数据库驱动就是一个典型的例子。*

### 第二步：配置数据库“连接参数”

现在引擎零件有了，我们需要告诉Spring Boot如何连接到我们的PostgreSQL数据库。这在`application.properties`文件中完成。

> **准备工作**: 在继续之前，请确保你已经在你的本地机器上安装了PostgreSQL，并创建了一个名为`vibevault`的数据库。你可以使用pgAdmin或`psql`命令行工具来完成。
>
> ```sql
> CREATE DATABASE vibevault;
> ```

```properties
# In: chapter-code/ch08/app/src/main/resources/application.properties

# --- 数据库连接配置 ---
# 数据库的JDBC URL。格式为: jdbc:postgresql://<主机>:<端口>/<数据库名>
spring.datasource.url=jdbc:postgresql://localhost:5432/vibevault
# 数据库用户名
spring.datasource.username=your_postgres_user # <--- 请替换为你的PostgreSQL用户名
# 数据库密码
spring.datasource.password=your_postgres_password # <--- 请替换为你的PostgreSQL密码

# --- JPA & Hibernate 配置 ---
# 让Hibernate根据我们的实体类自动更新数据库表结构（创建或修改）
# 这在开发阶段非常方便，但在生产环境中需要更谨慎的策略（如Flyway或Liquibase）
spring.jpa.hibernate.ddl-auto=update

# 在控制台打印出Hibernate生成的SQL语句，便于调试和学习
spring.jpa.show-sql=true

# 对打印的SQL进行格式化，使其更易读
spring.jpa.properties.hibernate.format_sql=true
```

### 第三步：将模型进化为“实体”

现在，我们需要告诉JPA，我们的`Playlist`和`Song`这两个`record`不再是普通的Java对象，而是需要被持久化到数据库的**实体 (Entities)**。我们使用JPA注解来完成这个“身份的进化”。

**改造`Playlist.java`**

`Playlist`和`Song`之间是典型的“一对多”关系：一个播放列表可以包含多首歌曲。

```java
// In: chapter-code/ch08/app/src/main/java/com/vibevault/model/Playlist.java

package com.vibevault.model;

import jakarta.persistence.*; // 引入JPA注解
import java.util.ArrayList;
import java.util.List;

@Entity // <--- 1. 声明这是一个JPA实体
@Table(name = "playlists") // <--- 2. 映射到数据库的'playlists'表
public class Playlist {

    @Id // <--- 3. 标记主键
    private String name; // 我们继续使用播放列表的名字作为主键

    // --- 4. 定义一对多关系 ---
    @OneToMany(
        mappedBy = "playlist", // 指明这个关系由Song实体的'playlist'字段来维护
        cascade = CascadeType.ALL, // 级联操作：对Playlist的操作（如保存、删除）会自动应用到其关联的Songs
        orphanRemoval = true // 孤儿移除：从songs列表中移除的Song实体，将自动从数据库中删除
    )
    private List<Song> songs = new ArrayList<>();

    // --- 构造函数和方法 ---
    public Playlist(String name) {
        this.name = name;
    }

    // JPA需要一个无参的构造函数
    protected Playlist() {}

    public String getName() {
        return name;
    }

    public List<Song> getSongs() {
        return songs;
    }

    public void addSong(Song song) {
        songs.add(song);
        song.setPlaylist(this); // 关键：维护双向关系
    }

    public void removeSong(Song song) {
        songs.remove(song);
        song.setPlaylist(null);
    }
}
```

**改造`Song.java`**

`Song`现在需要一个外键来引用它所属的`Playlist`。

```java
// In: chapter-code/ch08/app/src/main/java/com/vibevault/model/Song.java

package com.vibevault.model;

import jakarta.persistence.*;

@Entity // <--- 1. 声明为实体
@Table(name = "songs") // <--- 2. 映射到'songs'表
public class Song {

    @Id // <--- 3. 标记主键
    @GeneratedValue(strategy = GenerationType.IDENTITY) // <--- 4. 主键生成策略：由数据库自增
    private Long id;

    private String title;
    private String artist;
    private int durationInSeconds;

    // --- 5. 定义多对一关系 ---
    @ManyToOne(fetch = FetchType.LAZY) // LAZY: 懒加载，只有在实际访问playlist时才从数据库加载
    @JoinColumn(name = "playlist_name") // 定义外键列的列名为'playlist_name'
    private Playlist playlist;
    
    // --- 构造函数和方法 ---

    // JPA需要无参构造函数
    public Song() {}
    
    public Song(String title, String artist, int durationInSeconds) {
        this.title = title;
        this.artist = artist;
        this.durationInSeconds = durationInSeconds;
    }

    // Getters
    public Long getId() { return id; }
    public String getTitle() { return title; }
    public String getArtist() { return artist; }
    public int getDurationInSeconds() { return durationInSeconds; }
    public Playlist getPlaylist() { return playlist; }

    // Setter for the bidirectional relationship
    public void setPlaylist(Playlist playlist) {
        this.playlist = playlist;
    }

    // 移除了 toCsvString 和 fromCsvString，因为我们不再需要它们
}
```
*请注意，我们将`Song`和`Playlist`从`record`改为了`class`。这是因为JPA实体通常需要无参构造函数，并且为了维护双向关系，我们需要`setter`方法，这些都与`record`的不可变性理念有所冲突。这是一个典型的为了适配框架而做的务实权衡。*

### 第四步：升级Repository，拥抱JPA

现在到了最神奇的一步。我们将抛弃之前充满IO操作的`FilePlaylistRepository`，用一个极其简洁的接口来取而代 dommages。

**修改`PlaylistRepository.java`接口**
我们让它继承Spring Data JPA的`JpaRepository`。这一个`extends`，就赋予了我们的接口**所有标准CRUD（创建、读取、更新、删除）操作的能力**，无需任何实现代码！

```java
// In: chapter-code/ch08/app/src/main/java/com/vibevault/repository/PlaylistRepository.java
package com.vibevault.repository;

import com.vibevault.model.Playlist;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PlaylistRepository extends JpaRepository<Playlist, String> {
    // JpaRepository<Playlist, String> 泛型参数说明:
    //  - Playlist: 这个Repository操作的实体类型
    //  - String: 这个实体主键的类型

    // 我们不再需要手动声明 save 和 load(findById) 方法。
    // JpaRepository已经为我们提供了：
    // - save(Playlist entity)
    // - findById(String id) : returns Optional<Playlist>
    // - findAll()
    // - deleteById(String id)
    // - ...等等
}
```

**删除`FilePlaylistRepository.java`**

是的，你没看错。我们不再需要这个类了。请在你的项目中**删除`FilePlaylistRepository.java`文件**。Spring Data JPA会在运行时自动为我们的`PlaylistRepository`接口提供一个代理实现。

### 第五步：微调Service层，适应新变化

由于`JpaRepository`提供的`findById`方法与我们之前定义的`load`方法签名完全兼容（都返回`Optional`），我们的`PlaylistServiceImpl`几乎不需要做任何修改！这完美地展示了分层架构和面向接口编程的好处。

我们只需要做一个小小的调整：在`addSongToPlaylist`中，我们不再需要手动调用`repository.save(playlist)`。

```java
// In: chapter-code/ch08/app/src/main/java/com/vibevault/service/PlaylistServiceImpl.java
// ... (大部分代码保持不变) ...

@Service
public class PlaylistServiceImpl implements PlaylistService {
    // ... (构造函数注入不变) ...

    @Override
    public PlaylistDTO getPlaylistById(String id) {
        // 这行代码完全不需要修改！
        Playlist playlist = repository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Playlist not found with id: " + id));
        
        // ... (DTO转换逻辑不变) ...
    }

    @Override
    @Transactional // <--- 关键注解：将整个方法包裹在一个数据库事务中
    public void addSongToPlaylist(String playlistId, SongDTO songDTO) {
        // 加载逻辑不变
        Playlist playlist = repository.findById(playlistId)
            .orElseThrow(() -> new ResourceNotFoundException("Playlist not found with id: " + playlistId));
        
        // DTO到模型的转换不变
        Song newSong = new Song(songDTO.title(), songDTO.artist(), 0);
        
        // 业务逻辑不变
        playlist.addSong(newSong);

        // repository.save(playlist);  <---  这一行可以被省略！
    }
}
```
**为什么可以省略`save`？**
当我们给方法添加`@Transactional`注解后，Spring会为它开启一个事务。在这个事务中，从数据库加载出来的实体（如`playlist`）是处于“受管”（Managed）状态的。Hibernate会自动追踪所有“受管”状态实体的变化。当事务在方法结束时提交，Hibernate会检测到`playlist`的`songs`列表发生了变化，并**自动生成对应的`INSERT`语句来持久化新的`Song`对象**。这个特性被称为“**脏检查**”（Dirty Checking），是ORM最神奇、也最高效的特性之一。

### 第六步：更新“种子数据”逻辑

我们的`CommandLineRunner`也需要更新，以适应新的实体和Repository。

```java
// In: chapter-code/ch08/app/src/main/java/com/vibevault/VibeVaultApplication.java
// ... (imports) ...

@SpringBootApplication
public class VibeVaultApplication {

    public static void main(String[] args) {
        SpringApplication.run(VibeVaultApplication.class, args);
    }

    @Bean
    @Profile("!test")
    public CommandLineRunner initData(PlaylistRepository repository) {
        return args -> {
            final String defaultPlaylistId = "my-favorites";
            // 使用 findById 替代之前的 load
            if (repository.findById(defaultPlaylistId).isEmpty()) {
                System.out.println("ℹ️ 默认播放列表不存在，正在创建示例数据...");
                
                Playlist playlist = new Playlist(defaultPlaylistId);
                
                // 注意我们现在如何添加歌曲
                playlist.addSong(new Song("Bohemian Rhapsody", "Queen", 355));
                playlist.addSong(new Song("Stairway to Heaven", "Led Zeppelin", 482));
                
                // 只需要保存Playlist，关联的Songs会因级联设置而自动保存
                repository.save(playlist); 
                
                System.out.println("✅ 示例数据创建完毕！");
            } else {
                System.out.println("ℹ️ 默认播放列表已存在，无需创建示例数据。");
            }
        };
    }
}
```

### 第七步：启动与见证奇迹！

现在，执行最后的操作：

1.  **启动应用**: 像之前一样，运行`VibeVaultApplication`的`main`方法。
2.  **观察控制台**: 你会看到Hibernate输出的`CREATE TABLE`和`ALTER TABLE`语句！它根据你的`@Entity`注解，自动为你创建了`playlists`和`songs`表，并设置了外键约束。接着，你会看到`INSERT`语句，这是我们的`CommandLineRunner`在工作。
3.  **连接数据库检查**: 使用pgAdmin或任何数据库客户端，连接到你的`vibevault`数据库。你会清楚地看到两张表，并且`songs`表中的两条记录通过`playlist_name`外键，正确地关联到了`playlists`表。
4.  **测试API**:
    *   `GET http://localhost:8080/api/playlists/my-favorites`，你会看到和之前完全一样的JSON响应。
    *   `POST http://localhost:8080/api/playlists/my-favorites/songs`，添加一首新歌。
    *   再次GET，你会看到新歌被成功添加。去数据库里检查，你会发现`songs`表里现在有三条记录了。

恭喜！你已经成功地完成了应用的“心脏移植”手术，将它的持久化能力提升到了一个全新的、工业级的水平。我们的VibeVault应用，现在已经准备好迎接真实世界的并发挑战了。

### 思考与练习

1.  **编码练习**: 我们在`Song`实体中为`id`字段使用了`@GeneratedValue(strategy = GenerationType.IDENTITY)`。JPA还支持其他几种主键生成策略，如`SEQUENCE`, `TABLE`, `AUTO`。请使用AI或查阅文档，解释`IDENTITY`和`SEQUENCE`策略的核心区别是什么？它们各自适用于哪些场景？
2.  **破坏性实验**: 尝试将`Playlist.java`中`@OneToMany`注解的`cascade = CascadeType.ALL`去掉，然后重新运行应用。当你调用`POST` API添加新歌时，会发生什么？为什么？这个实验会让你深刻理解级联操作的重要性。
3.  **AI协同与扩展**: "请解释Spring Data JPA中的‘派生查询方法’（Derived Query Methods）是什么？请为我现在的`PlaylistRepository`接口，添加一个可以根据`artist`名来查找所有`Song`实体的派生查询方法签名。我应该如何修改我的代码才能使用它？" 