---
title: "第八章：对抗“无序”：驯服并发访问的猛兽"
---

> "世界上唯一不变的，是变化本身。" - 赫拉克利特

## 本章危机

我们的API上线了，但很快就崩溃了。当两个用户“同时”尝试修改同一个播放列表文件时，我们的数据被写坏了（产生了“竞态条件”）。我们引以为傲的、基于文件的持久化方案，在“并发”这头猛兽面前，不堪一击。

## 本章顿悟

文件系统本质上是一个“悲观锁”的、低效的并发模型。我们需要一个专业的、从诞生之初就是为了解决“并发数据访问”而设计的系统。这个系统，就是“关系型数据库”。

在本章中，我们将直面从单用户到多用户系统所必须解决的核心挑战——数据一致性。我们将执行一次彻底的“心脏移植”手术，将VibeVault的持久化核心从脆弱的文件系统，升级为健壮的、工业级的数据库系统。我们将：

1.  **[为何需要数据库](./01-why-database.qmd)**: 从第一性原理出发，揭示文件系统在并发写入下的根本缺陷，并理解关系型数据库提供的ACID（原子性、一致性、隔离性、持久性）四大特性，是如何成为保护数据完整性的“守护神”。
2.  **[为何需要ORM](./02-why-orm.qmd)**: 深入探讨Java的“对象世界”与数据库的“关系世界”之间的“阻抗不匹配”，并顿悟ORM（对象关系映射）框架（如JPA/Hibernate）是如何作为“同声传译”，让我们能用优雅的、面向对象的方式操作数据库。
3.  **[迁移到PostgreSQL](./03-database-migration.qmd)**: 亲自动手，将我们的`FilePlaylistRepository`彻底改造为由Spring Data JPA驱动的`JpaRepository`。我们将学习如何配置数据库连接，如何用`@Entity`注解将Java类映射为数据库表，并最终见证ORM如何将繁琐的SQL操作，简化为一行行优雅的Java代码。

这一章将是VibeVault从一个“原型”走向一个“健壮应用”的关键一步，为你构建高并发、高可靠性的系统打下坚实的基础。 