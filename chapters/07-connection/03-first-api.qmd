---
title: "7.3 - 构建你的第一个API"
---

> "千里之行，始于足下。" - 老子

## 本节危机：万事俱备，如何连接？

在上一节，我们成功地将VibeVault项目升级成了一个现代化的Spring Boot应用。我们拥有了一个功能完备的Web服务器，随时准备好接收网络请求。然而，我们之前在第六章中精心设计的业务逻辑组件——`PlaylistService`、`FilePlaylistRepository`等，目前还静静地躺在代码库里，与这个Web服务器**完全隔离**。

Spring Boot的自动配置虽然强大，但它并不知道我们编写的这些类是做什么的，也不知道应该在何时创建它们、如何将它们组合在一起。我们手动`new`对象的传统方式，无法让这些组件融入Spring的自动化管理世界。

**我们面临的危机是：如何将我们自己编写的业务组件，“注册”到Spring的管理体系中，并建立一座桥梁，将外部传入的HTTP请求，精确地“路由”到正确的业务逻辑上，从而真正地将它们从一个本地应用，演进为一个Web API？**

## 本节顿悟：注解——给Spring的“指令”

Spring Boot通过**注解 (Annotations)** 来完美地解决了这个问题。注解就像是我们贴在Java类、方法或字段上的“标签”。当Spring Boot应用启动时，它会像一个勤劳的管家一样，扫描我们代码中所有贴有特定标签的组件，然后根据这些标签的指示来自动化地完成对象的创建、组装和管理。

### 核心“组件”注解：声明Bean的角色

*   `@Component`: 这是最基础、最通用的标签。一旦贴在一个类上，就等于告诉Spring：“请为我创建这个类的一个实例（instance），并由你来全权管理它的生命周期。”这个由Spring创建和管理的实例，我们称之为**Bean**。
*   `@Repository`: 这是`@Component`的一个特殊化版本，专门用来贴在**数据访问层**（Repository）的实现类上。它不仅声明了这是一个Bean，还清晰地向其他开发者传达了它的角色——“这是一个负责数据存储与检索的仓库”。
*   `@Service`: 同样是`@Component`的特殊化版本，用于**业务逻辑层**（Service）的实现类。它表明这个Bean的角色是提供具体的“业务服务”。
*   `@RestController`: 这是一个功能更强大的组合标签，我们贴在**表现层**（Controller）的类上。它告诉Spring两件重要的事情：
    1.  这也是一个Bean，专门负责处理HTTP请求。
    2.  这个控制器下所有方法的返回值，都应该被自动序列化成JSON格式，并直接作为HTTP响应的内容发送给客户端。

### 核心“连接”注解：实现依赖注入

当我们把所有组件都使用上述注解标记为Bean后，Spring容器就会在启动时自动创建它们。那么，组件之间的依赖关系（比如`PlaylistServiceImpl`需要一个`PlaylistRepository`）如何建立呢？我们不再需要手动`new`。

取而代之的是，我们使用**构造函数注入 (Constructor Injection)** 的方式来声明依赖，这是Spring官方最为推荐的方式。

```java
@Service
public class PlaylistServiceImpl implements PlaylistService {
    private final PlaylistRepository repository;

    // 这是PlaylistServiceImpl的构造函数
    // 当Spring要创建PlaylistServiceImpl这个Bean时，
    // 它会检查这个构造函数，发现需要一个PlaylistRepository类型的参数。
    // 于是，Spring会自动在它所管理的全部Bean中，寻找一个匹配的PlaylistRepository Bean，
    // 并自动地、无形地将它作为参数“注入”进来。
    public PlaylistServiceImpl(PlaylistRepository repository) {
        this.repository = repository;
    }
    
    // ...
}
```

这个过程，就好像组件的创建和依赖的“控制权”，从我们程序员手中**反转**给了Spring容器，再由容器将依赖关系**注入**到需要它的地方。这就是Spring框架最核心、最基础的思想——**控制反转 (Inversion of Control - IoC)** 和 **依赖注入 (Dependency Injection - DI)**。

现在，让我们动手将第六章的所有零件，用注解的方式重新连接和升级，构建出我们的第一个API。

---

## Vibe Check (动手与思考)

我们将按照以下步骤，逐步将`ch07`项目从一个简陋的命令行应用，彻底重构为一个功能完备、设计优雅的现代Web API。

### 第一步：标注并重构Repository

我们首先从数据访问层开始。当前 `FilePlaylistRepository` 的设计存在一些问题：它只能处理单个固定的文件 (`data/playlist.csv`)，并且在文件不存在时处理方式不够健壮。我们需要对其进行改造。

**修改 `FilePlaylistRepository.java`**

1.  为其添加 `@Repository` 注解，将其声明为一个由Spring管理的Bean。
2.  改造 `save` 和 `load` 方法，让它们能够根据 `playlistId` 处理**不同**的文件。例如，ID为 "my-favorites" 的播放列表应存为 `my-favorites.csv`。
3.  **[最佳实践]** 改造 `load` 方法，使其返回 `Optional<Playlist>`。这是现代Java中处理“可能不存在”的值的标准方式，可以有效避免 `NullPointerException`。
4.  **[最佳实践]** 在IO操作失败时，抛出运行时异常，而不是简单地在控制台打印错误。

```java
// In: chapter-code/ch07/app/src/main/java/com/vibevault/repository/FilePlaylistRepository.java
package com.vibevault.repository;

import com.vibevault.model.Playlist;
import com.vibevault.model.Song;
import org.springframework.stereotype.Repository; // 引入注解
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional; // 引入Optional

@Repository // <--- 添加标签
public class FilePlaylistRepository implements PlaylistRepository {
    private static final String DATA_DIRECTORY = "data";
    private static final Path DATA_PATH = Paths.get(DATA_DIRECTORY);

    @Override
    public void save(Playlist playlist) {
        // 让文件名与播放列表的ID动态关联
        Path path = DATA_PATH.resolve(playlist.getName() + ".csv");
        
        // 使用Stream API，代码更简洁
        List<String> csvLines = playlist.getSongs().stream()
            .map(Song::toCsvString)
            .toList();

        try {
            // 确保 "data" 目录存在
            if (Files.notExists(DATA_PATH)) {
                 Files.createDirectories(DATA_PATH);
            }
            Files.write(path, csvLines);
        } catch (IOException e) {
            // 抛出运行时异常，让错误在更高层级被处理
            throw new RuntimeException("Error saving playlist to " + path, e);
        }
    }

    @Override
    public Optional<Playlist> load(String playlistId) { // <--- 返回类型改为Optional<Playlist>
        Path path = DATA_PATH.resolve(playlistId + ".csv");

        if (Files.notExists(path)) {
            return Optional.empty(); // <--- 如果文件不存在，明确返回“空”
        }

        Playlist playlist = new Playlist(playlistId);
        try {
            List<String> csvLines = Files.readAllLines(path);
            for (String line : csvLines) {
                // 复用Song中的静态工厂方法，保持代码干净
                playlist.addSong(Song.fromCsvString(line));
            }
        } catch (IOException | NumberFormatException e) {
             throw new RuntimeException("Error loading playlist from " + path, e);
        }
        return Optional.of(playlist); // <--- 用Optional包装返回结果
    }
}
```

**修改 `PlaylistRepository.java` 接口**

为了使 `FilePlaylistRepository` 的修改能够成功编译，我们**必须**同步更新 `PlaylistRepository` 接口，使其 `load` 方法的返回类型也变为 `Optional<Playlist>`。

```java
// In: chapter-code/ch07/app/src/main/java/com/vibevault/repository/PlaylistRepository.java
package com.vibevault.repository;

import com.vibevault.model.Playlist;
import java.util.Optional;

public interface PlaylistRepository {
    void save(Playlist playlist);
    Optional<Playlist> load(String playlistId); // <--- 修改返回类型
}
```

### 第二步：彻底重构Service层
当前的 `PlaylistService` 接口和实现完全是为命令行交互设计的。我们需要重新定义它的职责，使其服务于一个RESTful API。

1.  **修改 `PlaylistService.java` 接口**:
    重新定义接口方法，使其符合API的业务场景，如“根据ID获取播放列表”、“向指定播放列表添加歌曲”。

    ```java
    // In: chapter-code/ch07/app/src/main/java/com/vibevault/service/PlaylistService.java
    package com.vibevault.service;
    
    // 我们将在这里引入DTO，但为了步骤清晰，先使用内部模型
    import com.vibevault.model.Playlist;
    import com.vibevault.model.Song;

    public interface PlaylistService {
        Playlist getPlaylistById(String id);
        void addSongToPlaylist(String playlistId, Song song);
    }
    ```

2.  **修改 `PlaylistServiceImpl.java` 实现**:
    *   添加 `@Service` 注解。
    *   使用构造函数注入 `PlaylistRepository`。
    *   实现新的接口方法，并处理从Repository返回的`Optional`。

    ```java
    // In: chapter-code/ch07/app/src/main/java/com/vibevault/service/PlaylistServiceImpl.java
    package com.vibevault.service;

    import com.vibevault.model.Playlist;
    import com.vibevault.model.Song;
    import com.vibevault.repository.PlaylistRepository;
    import org.springframework.stereotype.Service; // 引入注解

    @Service // <--- 添加标签
    public class PlaylistServiceImpl implements PlaylistService {
        private final PlaylistRepository repository;

        // <--- 使用构造函数注入依赖
        public PlaylistServiceImpl(PlaylistRepository repository) {
            this.repository = repository;
        }

        @Override
        public Playlist getPlaylistById(String id) {
            // 调用repository，如果返回的Optional为空，暂时返回null
            // 我们很快会用更好的方式（异常处理）来改进它
            return repository.load(id).orElse(null);
        }

        @Override
        public void addSongToPlaylist(String playlistId, Song song) {
            // 先加载播放列表，如果不存在则抛出异常，确保操作的有效性
            Playlist playlist = repository.load(playlistId)
                .orElseThrow(() -> new IllegalStateException("Cannot add song to a non-existent playlist: " + playlistId));
            
            // 执行业务逻辑并持久化
            playlist.addSong(song);
            repository.save(playlist);
        }
    }
    ```

### 第三步：Model vs. DTO - 为什么要多此一举？

在进入下一步之前，我们必须理解一个关键的软件设计原则：**API的“契约”应该与其内部的“领域模型”解耦**。

*   **领域模型 (Domain Model)**: 这是我们应用的核心。像`Playlist`和`Song`这样的`record`或`class`，它们不仅仅是数据的容器，更封装了业务规则和行为（例如`Playlist`中的`addSong`方法）。它们是为应用内部的 **业务逻辑** 服务的。领域模型可能会包含许多内部状态、复杂的对象关系，甚至一些不应该对外暴露的敏感信息。

*   **数据传输对象 (Data Transfer Object - DTO)**: DTO的目标则非常单纯：**为数据传输而生**。它是一个纯粹的数据载体，专门用于在不同层之间（特别是应用边界，如我们的REST API）传递信息。DTO应该是“扁平的”，只包含客户端需要或允许提供的字段，**不包含任何业务逻辑**。

**为什么要区分它们？**

1.  **API稳定性**: 我们的内部领域模型`Song`可能会经常变化，比如我们想增加`durationInSeconds`、`genre`、`album`等字段。如果API直接暴露`Song`模型，每次内部模型的改动都可能破坏API的兼容性，导致客户端应用崩溃。而DTO作为一层“防腐层”，可以保持API的稳定，即使内部模型已经演化。
2.  **安全性**: 我们的`User`模型可能包含`hashedPassword`和`roles`字段。如果直接返回`User`模型，会将这些敏感信息泄露给客户端。通过创建一个`UserDTO`，我们可以精确控制只返回`username`和`email`等安全信息。
3.  **关注点分离**: `Controller`的职责是处理HTTP请求和响应，它应该只关心DTO。`Service`层的职责是执行业务逻辑，它应该关心领域模型。这种分离使得代码结构更清晰，职责更单一。

> **顿悟**: 将Model和DTO分离，就像是为你的房子装上了**窗户和门**。你不会把整个客厅（Model）都推到街上（API）去和人交流，而是通过一个精确控制大小和开关的门窗（DTO）来与外界互动。

现在，让我们来定义API的“数据契约”。

### 第四步：定义API的“数据契约” - DTOs

直接在API的输入和输出中使用我们的内部领域模型（`Playlist`和`Song`）通常被认为是一种**不良实践**。API应该通过**DTO (Data Transfer Object)** 来与外部世界沟通。在现代Java中，`record`是创建DTO的完美工具。

1.  **创建DTO包**: 在`com.vibevault`下创建新包`dto`。
2.  **创建DTO类**: 在`dto`包下使用`record`关键字创建`SongDTO.java`和`PlaylistDTO.java`。

    ```java
    // Create new file: chapter-code/ch07/app/src/main/java/com/vibevault/dto/SongDTO.java
    package com.vibevault.dto;

    // 我们决定只在API中暴露歌曲的标题和艺术家，
    // 隐藏`durationInSeconds`这个内部实现细节。
    public record SongDTO(String title, String artist) {
    }
    ```
    
    ```java
    // Create new file: chapter-code/ch07/app/src/main/java/com/vibevault/dto/PlaylistDTO.java
    package com.vibevault.dto;

    import java.util.List;

    public record PlaylistDTO(String name, List<SongDTO> songs) {
    }
    ```

### 第五步：演进Service层以处理DTO和异常

现在我们有了DTO，需要更新`PlaylistService`，让它能够理解和返回DTO，并能优雅地处理“资源未找到”的场景。

1.  **创建自定义异常**:
    一个专业的API应该对不同的错误返回不同的HTTP状态码。例如，当请求的资源不存在时，应返回404 Not Found。
    *   在`com.vibevault`下创建新包`exception`。
    *   在其中定义`ResourceNotFoundException.java`。

    ```java
    // Create new file: chapter-code/ch07/app/src/main/java/com/vibevault/exception/ResourceNotFoundException.java
    package com.vibevault.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.NOT_FOUND) // <--- 关键注解
    public class ResourceNotFoundException extends RuntimeException {
        public ResourceNotFoundException(String message) {
            super(message);
        }
    }
    ```
    *`@ResponseStatus(HttpStatus.NOT_FOUND)`这个注解威力巨大。当这个异常在Controller层被抛出且未被捕获时，Spring框架会自动拦截它，并生成一个标准的HTTP 404 Not Found响应。*

2.  **更新`PlaylistService`接口**:
    让接口的契约使用我们新定义的DTO。

    ```java
    // In: chapter-code/ch07/app/src/main/java/com/vibevault/service/PlaylistService.java
    package com.vibevault.service;
    
    import com.vibevault.dto.PlaylistDTO;
    import com.vibevault.dto.SongDTO;

    public interface PlaylistService {
        PlaylistDTO getPlaylistById(String id);
        void addSongToPlaylist(String playlistId, SongDTO songDTO);
    }
    ```

3.  **完善`PlaylistServiceImpl`实现**:
    这是连接所有逻辑的核心。它负责调用Repository，处理`Optional`返回的可能为空的情况（抛出异常），并将领域模型安全地转换为外部的DTO。

    ```java
    // In: chapter-code/ch07/app/src/main/java/com/vibevault/service/PlaylistServiceImpl.java
    package com.vibevault.service;

    import com.vibevault.dto.PlaylistDTO;
    import com.vibevault.dto.SongDTO;
    import com.vibevault.exception.ResourceNotFoundException;
    import com.vibevault.model.Playlist;
    import com.vibevault.model.Song;
    import com.vibevault.repository.PlaylistRepository;
    import java.util.stream.Collectors;
    import org.springframework.stereotype.Service;

    @Service
    public class PlaylistServiceImpl implements PlaylistService {
        private final PlaylistRepository repository;

        public PlaylistServiceImpl(PlaylistRepository repository) {
            this.repository = repository;
        }
        
        @Override
        public PlaylistDTO getPlaylistById(String id) {
            // 调用repository，如果返回的Optional为空，则立即抛出我们自定义的异常
            Playlist playlist = repository.load(id)
                .orElseThrow(() -> new ResourceNotFoundException("Playlist not found with id: " + id));

            // [模型转换] 将内部的Playlist领域模型，安全地转换为外部的PlaylistDTO
            return new PlaylistDTO(
                playlist.getName(),
                playlist.getSongs().stream()
                    .map(song -> new SongDTO(song.title(), song.artist())) // 只取需要暴露的字段
                    .collect(Collectors.toList())
            );
        }

        @Override
        public void addSongToPlaylist(String playlistId, SongDTO songDTO) {
            // 先加载播放列表，如果不存在则同样会抛出404异常，确保操作的有效性
            Playlist playlist = repository.load(playlistId)
                .orElseThrow(() -> new ResourceNotFoundException("Playlist not found with id: " + playlistId));
            
            // [模型转换] 将外部传入的SongDTO，转换为内部的Song领域模型
            // 注意：因为SongDTO没有时长信息，我们在这里使用一个默认值0
            Song newSong = new Song(songDTO.title(), songDTO.artist(), 0);
            
            // 执行业务逻辑并持久化
            playlist.addSong(newSong);
            repository.save(playlist);
        }
    }
    ```
    *请仔细体会`getPlaylistById`方法：`orElseThrow`的运用，使得处理“数据不存在”这个业务场景的逻辑变得异常清晰和简洁。这正是`Optional`的威力所在。*

### 第六步：创建Web控制器，连接外部世界

万事俱备，只欠东风。现在，我们可以创建真正的API端点，作为我们服务的HTTP入口。

1.  **创建Controller包**: 在`com.vibevault`下创建一个新的包`controller`。
2.  **创建`PlaylistController.java`**:

    ```java
    // Create new file: chapter-code/ch07/app/src/main/java/com/vibevault/controller/PlaylistController.java
    package com.vibevault.controller;

    import com.vibevault.dto.PlaylistDTO;
    import com.vibevault.dto.SongDTO;
    import com.vibevault.service.PlaylistService;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;

    @RestController // <--- 关键标签：声明这是一个RESTful控制器
    @RequestMapping("/api/playlists") // <--- 声明这个控制器下所有API的URL基础路径
    public class PlaylistController {

        private final PlaylistService playlistService;

        // <--- 通过构造函数注入Service Bean
        public PlaylistController(PlaylistService playlistService) {
            this.playlistService = playlistService;
        }

        @GetMapping("/{id}") // <--- 将此方法映射到 GET /api/playlists/{id} 请求
        public PlaylistDTO getPlaylist(@PathVariable String id) {
            // @PathVariable会将URL路径中的{id}部分，绑定到方法的id参数上
            return playlistService.getPlaylistById(id);
        }

        @PostMapping("/{id}/songs") // <--- 将此方法映射到 POST /api/playlists/{id}/songs 请求
        @ResponseStatus(HttpStatus.CREATED) // <--- 设定成功响应的HTTP状态码为201 Created，这是RESTful设计的最佳实践
        public void addSongToPlaylist(@PathVariable String id, @RequestBody SongDTO songDTO) {
            // @RequestBody会将HTTP请求体中的JSON内容，自动反序列化并绑定到SongDTO对象上
            playlistService.addSongToPlaylist(id, songDTO);
        }
    }
    ```

### 第七步：创建启动“种子数据”

为了让我们的API在第一次启动时就有数据可供测试和查看，我们将使用 `CommandLineRunner`。这是一个特殊的Spring Boot接口，我们只需提供一个实现了它的Bean，Spring Boot就会在应用完全启动后，自动执行其中的`run`方法。这是初始化数据的绝佳时机。

**修改主启动类 `VibeVaultApplication.java`**:
```java
// In: chapter-code/ch07/app/src/main/java/com/vibevault/VibeVaultApplication.java
package com.vibevault;

import com.vibevault.model.Playlist;
import com.vibevault.model.Song;
import com.vibevault.repository.PlaylistRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Profile;

@SpringBootApplication
public class VibeVaultApplication {

    public static void main(String[] args) {
        SpringApplication.run(VibeVaultApplication.class, args);
    }

    @Bean // <--- 将这个CommandLineRunner注册为一个Bean
    @Profile("!test") // <--- 这个Bean只在非"test"环境下生效，避免影响自动化测试
    public CommandLineRunner initData(PlaylistRepository repository) {
        return args -> {
            final String defaultPlaylistId = "my-favorites";
            // 检查默认播放列表是否已存在，避免重复创建
            if (repository.load(defaultPlaylistId).isEmpty()) {
                System.out.println("ℹ️ 默认播放列表不存在，正在创建示例数据...");
                Playlist playlist = new Playlist(defaultPlaylistId);
                playlist.addSong(new Song("Bohemian Rhapsody", "Queen", 355));
                playlist.addSong(new Song("Stairway to Heaven", "Led Zeppelin", 482));
                repository.save(playlist);
                System.out.println("✅ 示例数据创建完毕！");
            } else {
                System.out.println("ℹ️ 默认播放列表已存在，无需创建示例数据。");
            }
        };
    }
}
```
*`@Profile("!test")`注解是一个非常实用的技巧。它告诉Spring，只有在当前激活的配置（profile）不是`test`时，才创建这个`initData` Bean。这可以防止在运行自动化测试时，初始化逻辑对测试环境造成干扰。*

### 第八步：启动与验证！

恭喜！您已经成功地将所有组件连接起来，构建了一个完整的Web API。现在，让我们启动并验证它。

1.  **启动应用**: 在IDE中，找到并运行`VibeVaultApplication`的`main`方法。

2.  **验证GET请求**: 打开你的浏览器或任何API测试工具，访问地址：
    `http://localhost:8080/api/playlists/my-favorites`
    
    你应该能看到一个结构清晰的JSON响应，其中包含了我们自动创建的两首歌曲。注意，响应中不包含`durationInSeconds`字段，因为我们的`SongDTO`中没有定义它。
    ```json
    {
      "name": "my-favorites",
      "songs": [
        {
          "title": "Bohemian Rhapsody",
          "artist": "Queen"
        },
        {
          "title": "Stairway to Heaven",
          "artist": "Led Zeppelin"
        }
      ]
    }
    ```

3.  **验证404 Not Found**: 接着访问一个不存在的播放列表：
    `http://localhost:8080/api/playlists/non-existent-id`
    
    这次，你将看到一个由Spring Boot自动生成的、专业的404错误响应页面或JSON，这正是我们通过`ResourceNotFoundException`和`@ResponseStatus`注解所实现的。

4.  **验证POST请求**: 使用`curl`或Postman等工具，向播放列表添加一首新歌。

    ```bash
    curl -X POST http://localhost:8080/api/playlists/my-favorites/songs \
         -H "Content-Type: application/json" \
         -d '{"title": "Hotel California", "artist": "Eagles"}'
    ```
    这个命令应该会返回一个`201 Created`状态码。执行后，再次在浏览器中访问`http://localhost:8080/api/playlists/my-favorites`，你会兴奋地发现，新歌已经被成功添加进去了！

### 思考与练习

1.  **编码练习**: 基于以上知识，请为`PlaylistController`实现`DELETE /api/playlists/{id}/songs`端点，用于从播放列表中删除一首指定的歌曲。你需要提供歌曲的`title`作为参数来识别要删除的歌曲。
    *   你需要在`PlaylistService`和`Playlist`领域模型中添加相应的删除逻辑。
    *   思考：如何处理要删除的歌曲不存在的情况？应该返回什么HTTP状态码？

2.  **思考**: `@RestController`注解和传统的`@Controller`注解有什么本质区别？（提示：可以查阅一下`@ResponseBody`注解的作用，`@RestController`其实是`@Controller` + `@ResponseBody`的便捷组合。）
3.  **AI协同**: "请向我解释Spring Boot中的`@ControllerAdvice`和`@ExceptionHandler`注解。相比于我们现在使用的`@ResponseStatus`，它们能如何更精细地控制API的错误响应格式？请给我一个具体的例子，展示如何捕获`ResourceNotFoundException`并返回一个包含错误信息、时间戳和请求路径的自定义JSON响应体。" 