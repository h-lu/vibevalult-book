---
title: "5.4 - 伪造现实：Mockito的when-thenReturn"
---

> "你所看到的现实，只是你愿意相信的那个版本。" - 改编自《黑客帝国》

## 本节危机：如何测试“依赖输入”的方法？

我们已经知道如何测试一个纯粹的计算方法（如`getSongCount`），但如果一个方法依赖于**外部输入**呢？`loadFromFile`方法就是一个典型例子，它的行为完全取决于`Files.readAllLines`从磁盘上读取到的内容。

我们当然不希望在单元测试中真的去读一个物理文件，那我们如何为`loadFromFile`方法提供一个可控的、假的“文件内容”，来测试它后续的处理逻辑是否正确？

**我们面临的危机是：我们无法在不访问真实世界（文件系统）的情况下，为一个依赖外部数据输入的方法，提供可控的测试场景。**

## 本节顿悟：用`when-thenReturn`伪造全世界

Mockito的核心能力之一，就是**打桩 (Stubbing)**。它允许我们“拦截”一个方法的调用，并规定：“**当 (when)** 这个方法被以特定参数调用时，**就返回 (then return)** 我指定好的假数据。”

这个`when(...).thenReturn(...)`的句式，就是我们伪造现实的“咒语”。它让我们能够完全控制被测试方法的输入，从而可以精确地验证它的处理逻辑。

### 1. 将Mockito添加到我们的实验室

首先，我们需要在`app/build.gradle.kts`的`dependencies`块中添加Mockito的核心依赖（如果尚未添加）。

```kotlin
// In: app/build.gradle.kts

dependencies {
    testImplementation("org.assertj:assertj-core:3.25.3")
    
    // Add Mockito for creating mock objects and mocking static methods
    testImplementation("org.mockito:mockito-core:5.11.0")
}
```
*   **注意**: 现代Mockito (`mockito-core`) 已经内置了模拟静态和final方法的能力，不再需要额外的`mockito-inline`依赖。

请记得加载Gradle变更。

### 2. 测试`loadFromFile`的状态改变

现在我们来测试`loadFromFile`。我们将模拟`Files.readAllLines`的行为，用它来驱动我们`Playlist`对象的状态变化。

```java
// In: src/test/java/com/vibevault/model/PlaylistPersistenceTest.java
package com.vibevault.model;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mockStatic;

class PlaylistPersistenceTest {

    @Test
    @DisplayName("loadFromFile应该根据文件内容更新播放列表")
    void loadFromFileShouldUpdatePlaylistFromFileContent() {
        // Arrange
        Playlist playlist = new Playlist("My Loaded Playlist");
        Path filePath = Paths.get("existing-playlist.csv");
        List<String> fakeCsvLines = List.of("Yesterday,The Beatles,121", "Let It Be,The Beatles,243");

        try (var mockedFiles = mockStatic(Files.class)) {
            // 这就是“咒语”：我们“打桩”了静态方法的调用。
            // 当 Files.readAllLines 被以我们的路径参数调用时，就返回我们伪造的数据。
            mockedFiles.when(() -> Files.readAllLines(filePath)).thenReturn(fakeCsvLines);
            
            // Act
            playlist.loadFromFile(filePath.toString());

            // Assert
            // 验证Playlist对象的状态是否被我们的假数据正确地更新了。
            assertThat(playlist.getSongCount()).isEqualTo(2);
            assertThat(playlist.getSongs())
                .extracting(Song::title) // 一个很酷的AssertJ特性，可以只检查标题
                .containsExactly("Yesterday", "Let It Be");
        }
    }
    
    // ... 其他测试，比如 saveToFile的测试 ...
}
```

### 代码深度剖析：
*   **`try (var mockedFiles = mockStatic(Files.class))`**: 同样，我们需要一个静态模拟的作用域。
*   **`mockedFiles.when(() -> Files.readAllLines(filePath)).thenReturn(fakeCsvLines)`**: 这就是打桩的核心。
    *   **`when(...)`**: 括号内是一个Lambda表达式，指定了我们想要拦截的方法调用——`Files.readAllLines(filePath)`。
    *   **`thenReturn(...)`**: 指定了当上述调用发生时，应该返回的值——我们预先准备好的`fakeCsvLines`。
*   **`assertThat(playlist)...extracting(...)`**: 在`Act`阶段之后，我们通过`getSongCount()`和`getSongs()`来断言`Playlist`对象的状态是否已经被我们提供的假数据正确地更新了。这是一种典型的“状态验证”。`extracting(Song::title)`是AssertJ一个强大的特性，它能从一个对象列表中，提取出每个对象的`title`属性，形成一个新的`String`列表，然后我们再对这个新列表进行断言。

**顿悟在于：通过`when-thenReturn`，我们可以将被测试代码与它所依赖的外部世界完全隔离开。我们不再关心数据从哪里来，而是专注于我们的代码在接收到特定数据后，其行为是否正确。这是编写快速、稳定、可维护单元测试的核心思想。**

---

### Vibe Check (思考与练习)

1.  **核心练习**: 添加Mockito依赖，创建`PlaylistPersistenceTest.java`（如果还未创建），并使用`when-thenReturn`成功编写并运行`loadFromFile`的测试。
2.  **边界情况测试**: 为`loadFromFile`编写一个新的测试，模拟读取到的文件是**空的**场景。
    *   **提示**: 你需要打桩 `mockedFiles.when(() -> Files.readAllLines(filePath)).thenReturn(List.of());` （返回一个空的List）。
    *   然后调用`playlist.loadFromFile(...)`。你期望`playlist`的状态是什么？断言它的`getSongCount()`应该等于`0`。
3.  **AI协同**: `thenReturn`非常有用，但如果我想模拟一个会抛出异常的行为呢？请向你的AI伙伴提问：“在Mockito中，除了`thenReturn`，还有哪些用于打桩（stubbing）的方法？请重点解释`thenThrow`的用法，并给我一个模拟`Files.readAllLines`抛出`IOException`的例子。” 