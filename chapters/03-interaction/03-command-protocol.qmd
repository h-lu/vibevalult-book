---
title: "3.3 - 定义沟通协议：Switch与方法调用"
---

> "用户发出指令，系统执行任务。" 

::: {.video-container}
<iframe src="https://player.bilibili.com/player.html?bvid=BV1M5Jfz2E7K&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="400"></iframe>
:::

## 本节危机：无法理解的指令

我们已经建立了一个可靠的对话通道。我们的程序可以循环显示菜单，并安全地接收用户输入的整行文字。但是，它还听不懂这些文字的“含义”。当用户输入`1`时，他期望的是“添加歌曲”，而我们的程序目前什么也没做。

**我们面临的危机是：程序能“听到”用户的声音（输入数字），但无法“理解”其意图，更无法将其转化为对我们核心业务对象 (`Playlist`) 的具体操作。** 我们需要在“用户界面层”和“业务逻辑层”之间，建立一个翻译和分发的机制。

## 本节顿悟：`switch` 语句——指令分发中心

`switch` 语句是解决这个问题的完美工具。它就像一个总机接线员，根据用户拨打的分机号（我们从输入行中解析出的`choice`值），将电话转接到正确的部门（执行相应的代码块）。

让我们在 `main` 方法的 `while` 循环内部，用 `switch` 语句来填充 `try` 代码块，将用户的选择翻译成对 `playlist` 对象的方法调用。

```java
// VibeVaultApp.java (在while循环的try块内部)

String line = scanner.nextLine();
int choice = Integer.parseInt(line);

switch (choice) {
    case 1:
        System.out.print("请输入歌曲标题: ");
        String title = scanner.nextLine();
        System.out.print("请输入艺术家: ");
        String artist = scanner.nextLine();
        
        // 我们同样需要健壮地处理时长的输入
        int duration = 0;
        while (true) {
            try {
                System.out.print("请输入时长（秒）: ");
                duration = Integer.parseInt(scanner.nextLine());
                break; // 输入成功，跳出内部循环
            } catch (NumberFormatException e) {
                System.out.println("无效时长，请输入一个整数。");
            }
        }

        playlist.addSong(new Song(title, artist, duration));
        System.out.println("歌曲添加成功！");
        break;
    case 2:
        playlist.listSongs();
        break;
    case 0:
        running = false;
        break;
    default:
        System.out.println("无效选择，请输入菜单中的数字。");
        break;
}
```

### 代码深度解析：健壮的嵌套输入

请注意我们在 `case 1` 中是如何处理“时长”输入的。我们并没有简单地调用 `Integer.parseInt()`，而是为它专门构建了一个小型的、独立的 `while(true)` 循环和 `try-catch` 块。

*   **为什么？** 因为用户的输入是不可信的。在一个多步骤的交互中（先输入标题，再输入时长），如果用户在输入时长时出错，我们不应该让整个“添加歌曲”的操作失败并退回到主菜单。更好的用户体验是，**只让用户重新输入出错的那一部分**。
*   这个小循环完美地实现了这一点。只有当用户输入了一个合法的整数时长，`Integer.parseInt()` 不抛出异常，程序才会执行 `break;` 跳出这个“请求时长”的小循环，继续往下执行。

**顿悟在于：通过`switch`语句，我们成功地将用户的“意图”（输入的数字）与程序的“行为”（调用`Playlist`的方法）解耦和映射。并且通过精巧的嵌套输入循环，我们能构建出更加健壮、用户体验更友好的交互流程。这种“界面”与“逻辑”分离、并对每一步输入都进行精细控制的思想，是构建任何复杂软件的基本功。**

---

## Vibe Check (思考与练习)

1.  **核心练习**:
    将上面完整的 `switch` 代码块，整合到你的 `main` 方法的 `try` 块中。运行程序，你现在应该可以完整地执行“添加歌曲”和“查看列表”这两个功能了。尽情地与你的第一个“活”的程序互动吧！

2.  **健壮性练习**:
    在添加歌曲时，如果你在输入时长时输入了非数字，程序会怎样？
    *   它是否如我们所愿，只让你重新输入时长，而没有让你重新输入标题和艺术家？
    *   这个体验，对比于“只要输错一步就得从头再来”，是不是好得多？

3.  **编码练习：实现删除功能**
    *   **第一步：增强业务逻辑**。在 `Playlist.java` 类中，添加一个新的公开方法 `removeSong(int songIndex)`。这个方法接收一个整数（歌曲在列表中的编号，注意是1-based，而不是0-based的索引），然后从`songs`列表中删除对应的歌曲。记住，你需要将用户输入的1-based编号转换为0-based的列表索引（`songIndex - 1`）。
    *   **第二步：更新UI**。在 `main` 方法中，首先在菜单里增加一个选项：“3. 删除歌曲”。
    *   **第三步：连接UI与逻辑**。在 `switch` 语句中，增加 `case 3`。在这个case里，提示用户输入要删除的歌曲编号，并使用与我们读取时相同的、健壮的 `while-try-catch` 模式来读取这个编号，然后调用你刚刚在`Playlist`类中创建的`removeSong`方法。

4.  **责任划分思考 (重要)**:
    在你的`removeSong(int songIndex)`方法中，如果用户输入的编号是无效的（比如小于1，或者大于当前歌曲数量），程序可能会抛出`IndexOutOfBoundsException`并崩溃。
    *   我们应该在哪里做这个有效性检查？是在`main`方法里，还是在`Playlist`类自己的`removeSong`方法里？
    *   **提示 (第一性原理)**: 回顾第二章的“封装”。`Playlist`的责任是什么？是确保其内部状态（`songs`列表）的“一致性”和“有效性”。因此，防止无效索引破坏列表的责任，理应属于`Playlist`类自己。请在`removeSong`方法内部添加`if`判断来检查索引的有效性，如果无效，就打印一条错误消息，不要执行删除操作。

5.  **AI协同与代码重构**:
    我们使用的传统`switch`语句功能强大，但有时略显冗长。Java 14以后引入了更简洁的`switch`表达式。请向你的AI伙伴提问：
    > "你好，请帮我把我 Java `main` 方法里的这个传统的`switch`语句，重构为一个使用 Java `switch` 表达式的等价写法。然后请为我对比这两种写法，解释`switch`表达式在代码简洁性、可读性和防止“fall-through”错误方面有哪些优势？"
    这个练习会让你接触到更现代、更安全的Java语法。 