---
title: "3.2 - 建立对话通道：主循环与用户输入"
---

> "对话是编程的本质。" - 艾伦·凯

## 本节危机：无法言语，一触即溃

理论是灰色的，而生命之树常青。我们已经顿悟到需要一个“事件循环”来赋予程序生命，但如何用Java代码实现这个循环？我们如何搭建一个可靠的通道，来接收用户的指令，并保证这个通道不会因为用户一些意想不到的操作（比如在要求输入数字时输入了字母）而轻易崩溃？

**我们面临的危机是：缺乏将“事件循环”理论转化为健壮的、能处理真实世界混乱输入的Java代码的具体方法。**

## 本节顿悟：`while(true)` + `Scanner` + `try-catch` 三位一体

构建我们命令行应用的对话通道，只需要三样武器。

1.  **`while(true)`**: 这是我们事件循环最质朴的实现。它创造了一个永不停止的循环，象征着程序的“持续性生命”。
2.  **`Scanner`**: 这是我们与用户对话的“耳朵”。它负责监听标准输入流（`System.in`，通常是键盘），并从中解析出我们需要的数据。
3.  **`try-catch`**: 这是我们对话通道的“安全气囊”。它负责捕获预料之外的输入错误，保证我们的程序不会因为用户的误操作而崩溃，从而实现健壮性。

让我们立即动手，在 `VibeVaultApp.java` 的 `main` 方法中，将这三者结合起来。

```java
// VibeVaultApp.java
import java.util.InputMismatchException;
import java.util.Scanner;

public class VibeVaultApp {
    public static void main(String[] args) {
        // 1. 初始化：在循环外准备好世界所需的一切
        Scanner scanner = new Scanner(System.in);
        Playlist playlist = new Playlist("我的收藏");
        boolean running = true;

        // 2. 生命的开始：进入主事件循环
        while (running) {
            // 3. 输出：向用户展示当前世界状态和可选操作
            System.out.println("\n--- VibeVault 音乐播放列表 ---");
            System.out.println("1. 添加歌曲");
            System.out.println("2. 查看播放列表");
            System.out.println("0. 退出");
            System.out.print("请输入你的选择: ");

            // 4. 输入：等待并接收用户的指令（事件）
            try {
                String line = scanner.nextLine(); // **最佳实践：总是用nextLine()读取整行**
                int choice = Integer.parseInt(line); // 然后再尝试解析

                // TODO: 在下一节，我们将在这里处理 choice

            } catch (NumberFormatException e) {
                // 5. 异常处理：当用户的输入不是一个合法的整数时
                System.out.println("无效输入！请输入一个数字。");
            }
        }

        // 6. 结束：循环终止后的收尾工作
        System.out.println("感谢使用 VibeVault！");
        scanner.close();
    }
}
```

### 开启对话通道：配置Gradle

在我们将这段代码投入运行之前，必须解决一个关键的“管道连接”问题。默认情况下，当我们使用`./gradlew run`命令时，Gradle并不会将我们的终端键盘连接到Java程序的`System.in`。这导致我们的`Scanner`根本接收不到任何输入，程序会立即因为`NoSuchElementException`而崩溃。

我们需要明确地告诉Gradle：“我这个程序需要和用户互动，请把标准输入流（键盘）接上！”

**解决方案**非常简单，我们只需要在`app/build.gradle.kts`中添加几行配置。

1.  打开 `app/build.gradle.kts` 文件。
2.  在`application`代码块之后，添加以下代码块：

```kotlin
// ... 在 app/build.gradle.kts 文件中 ...

application {
    // ...
}

// 告诉所有Java执行任务（包括run），连接标准输入
tasks.withType<JavaExec> {
    standardInput = System.`in`
}
```

这几行代码的意思是：“找到项目中所有类型为`JavaExec`的任务（`run`任务就是其中之一），并将它们的标准输入流设置为`System.in`”。这样，`./gradlew run`在运行时就会忠实地扮演我们和程序之间的“传话筒”。

### 代码深度解析

*   **`Scanner`的最佳实践：`nextLine()` + `Integer.parseInt()`**:
    你可能会在很多地方看到 `scanner.nextInt()` 的用法。这是一个巨大的陷阱。`nextInt()` 只读取数字，而不读取你按下回车时产生的“换行符”。这个被遗留下来的换行符，会干扰下一次的读取，引发各种难以调试的诡异问题。
    
    一个更健壮、更可靠的模式是：**永远只用 `scanner.nextLine()` 来读取一整行输入**。这可以确保输入缓冲区总是干净的。然后，我们再用 `Integer.parseInt()` 尝试将这行字符串转换为整数。如果转换失败，它会抛出 `NumberFormatException`（而不是`InputMismatchException`），我们同样在`catch`块里捕获它。这个模式从根本上避免了所有与换行符相关的问题。

**顿悟在于：一个健壮的交互式程序，不仅要实现“正确”的逻辑，更要能优雅地处理“错误”的输入。采用`nextLine()` + `parseInt()`的模式，是我们构建任何可靠用户界面的基石。**

---

## Vibe Check (思考与练习)

1.  **核心练习**:
    将上面的完整代码复制到你的 `VibeVaultApp.java` 的 `main` 方法中。删除之前所有的测试代码。运行它，感受一下这个“活”起来的程序。

2.  **破坏性实验 (Hacker Time!)**:
    *   在程序提示你输入选择时，故意输入一个字母（比如 "x"）。观察程序是否如预期那样打印出“无效输入！”并让你重新输入。
    *   **思考**: 对比我们最终的代码和本节开头给出的、使用`nextInt()`的代码。思考一下，为什么我们最终的方案不再需要在`catch`块里调用`scanner.next()`来清空缓冲区了？（提示：`nextLine()`读取了**所有**字符，包括换行符。）

3.  **编码练习：实现退出功能**:
    目前我们的 `while(running)` 循环是个死循环。我们需要让用户能够优雅地退出。
    *   在 `try` 块内部，紧跟在 `int choice = scanner.nextInt();` 之后，添加一个判断。如果 `choice` 的值是 `0`，就将 `running` 变量设置为 `false`，然后使用 `break;` 关键字立即跳出 `while` 循环。
    *   运行并测试：输入 `0`，程序是否如期打印“感谢使用！”并正常退出？

4.  **思考 `while(true)` vs. `while(running)`**:
    我们使用了 `boolean running = true;` 和 `while(running)` 的组合。很多时候你也会看到 `while(true)` 的写法。
    *   这两种写法在功能上几乎等价。
    *   `while(running)` 的写法，其“意图”更明显——表明这个循环是有一个明确的“运行中”状态的。对于更复杂的程序，可能会有多个地方需要控制这个循环的启停，使用一个状态变量会更清晰。你更喜欢哪一种？为什么？ 