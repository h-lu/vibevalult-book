# 2.0 - Git 入门：代码的时光机

> “前事不忘，后事之师。”

## 本节危机：我的代码昨天还是好的！

在上一章，我们成功地初始化了 `VibeVault` 项目，它能够运行，能够通过测试，我们甚至还引入了 `Gson` 库。这是一个完美的开端。但一个幽灵般的问题开始浮现：

- 如果我为了尝试一个新功能，改了5个文件，结果发现想法是错的，该如何“撤销”这5个文件的所有修改？
- 如果我的代码今天还能正常工作，明天加了一个新功能后就崩溃了，我如何能精确地知道我昨天和今天代码的“区别”？
- 当项目越来越复杂，我们如何安全地保存每一个“里程碑”式的版本，以便随时可以回溯？

没有版本控制，我们的项目就像是建在沙滩上的城堡，任何一次错误的修改都可能让它毁于一旦。**我们面临的危机是：如何为我们的代码建立一个可靠的“存档”和“撤销”机制，让我们可以大胆地向前探索，同时拥有随时回到过去的“超能力”？**

## 本节顿悟：Git，代码的终极“存档”大法

答案就是 **Git**。Git 是一个分布式版本控制系统，我们可以将它理解为一台为代码量身定做的“时光机”。

它不仅仅是保存文件的副本，而是以“快照”（Commit）的形式，记录下你每一次有意义的修改。更强大的是，它引入了“平行宇宙”的概念——**分支（Branch）**。你可以在一个独立的宇宙里尽情实验，成功了，就将它合并回主宇宙；失败了，就将这个平行宇宙直接抛弃，主宇宙的代码丝毫不受影响。

**顿悟在于：我们应该像玩游戏一样频繁“存档”我们的代码。** 每完成一个小功能，就创建一个“存档点”（Commit）。在进行大的改动前，就开启一个“新的冒险线”（Branch）。这不仅给了我们无限的后悔药，也让我们的开发历史变得清晰可追溯。

## 1. 注入灵魂：为 `VibeVault` 项目启用 Git

现在，让我们回到在上一章创建的 `VibeVault` 项目，并为它注入版本控制的灵魂。

### 第一步：初始化仓库

打开终端，确保你位于 `VibeVault` 项目的根目录下。然后执行：

```bash
# 初始化Git仓库
git init
```

这个命令会在你的项目下创建一个隐藏的 `.git` 目录。这个目录就是你的项目的“时光机”本体，包含了所有的版本历史和信息。

### 第二步：定义“忽略”的艺术 (`.gitignore`)

执行 `git status` 命令，你会看到 Git 把项目里所有的文件都列了出来。但我们并不想追踪所有文件。像 `build` 目录下的编译产物，或者 `.gradle` 目录下的缓存，它们都是可以被重新生成的文件，不应该进入版本历史。

为此，我们需要创建一个名为 `.gitignore` 的文件，像写清单一样告诉 Git 哪些文件或目录应该被忽略。

在 `VibeVault` 项目根目录下创建 `.gitignore` 文件，并填入以下Java和Gradle项目的标准忽略内容：

```gitignore
# Created by https://www.toptal.com/developers/gitignore/api/java,gradle
# Edit at https://www.toptal.com/developers/gitignore?templates=java,gradle

### Gradle ###
.gradle
build/

# Ignore Gradle GUI config
gradle-app.setting

# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)
!gradle-wrapper.jar

# Avoid ignoring gradle-wrapper.properties if it contains sensitive information
!gradle/wrapper/gradle-wrapper.properties

# Cache of project dependencies
.gradletasknamecache

# End of https://www.toptal.com/developers/gitignore/api/java,gradle
```

再次运行 `git status`，你会发现 `build` 和 `.gradle` 目录已经消失在列表里了。完美！

### 第三步：拍摄第一张快照 (Initial Commit)

现在，让我们把项目的当前状态作为一个干净的、可回溯的起点，存入我们的“时光机”。

```bash
# 将所有未被忽略的文件添加到暂存区
git add .

# 提交更改，-m 后面是本次提交的说明信息
git commit -m "Initial commit of VibeVault project"
```

恭喜！你已经为你的项目拍摄了第一张历史快照。你可以通过 `git log` 命令查看你的提交历史。

## 2. 章节工作流：为每一次成长开辟新路径

随着我们学习的深入，`VibeVault` 项目会一章一章地演进。为了清晰地记录每一章的学习成果，我们将采用一个简单而强大的工作流：**为每一章的学习创建一个独立的分支。**

### 为什么用分支？

`main` 分支将作为我们的“黄金主线”，它只存放每个章节最终完成的、稳定的代码。而每一章的开发过程，都在一个专门的分支上进行。这样做的好处是：

- **隔离性**：你在 `ch02` 分支上的任何修改，都不会影响到 `main` 分支。你可以大胆地实验。
- **清晰性**：每个分支都清晰地对应一章的内容，让项目的演进历史一目了然。
- **安全性**：`main` 分支永远是你“确定能用”的版本。

### 开启第二章的冒险：创建 `ch02` 分支

现在，我们即将开始第二章的学习。让我们为此创建一个新的分支。

```bash
# 基于当前分支（main）创建一个名为 ch02 的新分支
git branch ch02

# 切换到 ch02 分支
git switch ch02
```

> **小贴士**：你可以用 `git switch -c ch02` 这一条命令同时完成创建和切换两个动作。

现在，你已经身处 `ch02` 这个“平行宇宙”了。从现在起，你在本章的所有编码、修改、提交，都将记录在 `ch02` 分支上。

### 我们未来的工作循环

在本书接下来的学习中，你将不断重复这个模式：

1.  **开始新章节 (例如第3章)**：

    ```bash
    # 确保你完成了上一章的合并，并切换回主分支
    git switch main
    # 为第3章创建并切换到新分支
    git switch -c ch03
    ```
2.  **在分支上学习和编码**：
    -   修改代码...
    -   `git add .`
    -   `git commit -m "完成了xxx功能"`
    -   重复...
3.  **完成章节，合并成果**：

    ```bash
    # 切换回主分支
    git switch main
    # 将 ch03 分支的全部成果合并到 main 分支
    git merge ch03
    ```

这个简单的工作流将贯穿我们整个学习旅程，让你在不知不觉中成为一名专业的“代码时空旅行者”。

## 练习与准备

你现在应该已经位于 `ch02` 分支上了。在本章接下来的内容中，我们将开始学习封装、设计新的Java类。请在 `ch02` 分支上完成这些工作，并练习使用 `git add` 和 `git commit` 来记录你的开发进度。

在第二章的最后，我们将一起实践第一次 `merge` 操作，将你的成果合并回 `main` 分支。


## 附：Git的安装

如果你在第一章的工具准备环节中尚未安装 Git，可以从以下地址下载。

- **官方网站**: [https://git-scm.com/downloads](https://git-scm.com/downloads)
- **中国镜像**: [https://registry.npmmirror.com/binary.html?path=git-for-windows/](https://registry.npmmirror.com/binary.html?path=git-for-windows/)

根据你的操作系统（Windows, macOS, or Linux）选择对应的版本进行安装。